{"ast":null,"code":"var _jsxFileName = \"/home/dan/Documents/projectv2/front/src/components/GroupList.jsx\";\nimport React from 'react';\nimport Cookies from 'universal-cookie';\nimport { useChatContext, ChannelList } from 'stream-chat-react';\nimport icon1 from '../Stuff/icon1.png';\nimport icon2 from '../Stuff/icon2.png';\nimport GroupFinder from './GroupFinder';\nimport Groups from './Groups';\nimport PreList from './PreList';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nvar ListHeaderStyle = {\n  color: 'red',\n  padding: \"0 20px\",\n  display: \"flex\",\n  justifyContent: \"space-between\",\n  alignItems: \"center\"\n}; //We can use inline styles by creating a json of styles and setting style attribute to them inline\n\nvar titleStyle = {\n  fontFamily: \"sans-serif\",\n  fontStyle: \"normal\",\n  fontWeight: \"bold\",\n  fontSize: \"18px\",\n  lineHeight: \"28px\"\n};\n\nfunction ListHeader() {\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    style: ListHeaderStyle,\n    children: /*#__PURE__*/_jsxDEV(\"p\", {\n      style: titleStyle,\n      children: \"Groups:\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 31,\n      columnNumber: 9\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 30,\n    columnNumber: 5\n  }, this);\n}\n\n_c = ListHeader;\n\nfunction IconsHolder() {\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"icon_side_container\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"icon1\",\n      children: /*#__PURE__*/_jsxDEV(\"img\", {\n        className: \"iconimg1\",\n        src: icon1,\n        alt: \"appIcon\",\n        width: \"30\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 41,\n        columnNumber: 13\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 40,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"icon2\",\n      children: /*#__PURE__*/_jsxDEV(\"img\", {\n        className: \"iconimg2\",\n        src: icon2,\n        alt: \"LogoutIcon\",\n        width: \"30\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 44,\n        columnNumber: 13\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 43,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 39,\n    columnNumber: 5\n  }, this);\n} //We have our icon bar that we render, we then place the group container header and holder. We use the stream API\n// ChannelList component to display channels, but we create our own group list component of which we pass to the \n// api's channel component as a function of the listProp prop\n// Preview and Group list are optional, if not provided, stream chat provides its own channel list\n// First preview shows groups, the second shows direct messaging\n\n\n_c2 = IconsHolder;\n\nfunction GroupList() {\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(IconsHolder, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 57,\n      columnNumber: 12\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"group-list-wrapper\",\n      children: [/*#__PURE__*/_jsxDEV(ListHeader, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 59,\n        columnNumber: 16\n      }, this), /*#__PURE__*/_jsxDEV(GroupFinder, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 60,\n        columnNumber: 16\n      }, this), /*#__PURE__*/_jsxDEV(ChannelList, {\n        filters: () => {},\n        channelRenderFilterFn: () => {},\n        List: listProps => /*#__PURE__*/_jsxDEV(Groups, { ...listProps,\n          type: \"team\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 65,\n          columnNumber: 25\n        }, this),\n        Preview: previewProps => /*#__PURE__*/_jsxDEV(PreList, { ...previewProps,\n          type: \"team\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 71,\n          columnNumber: 25\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 61,\n        columnNumber: 16\n      }, this), /*#__PURE__*/_jsxDEV(ChannelList, {\n        filters: () => {},\n        channelRenderFilterFn: () => {},\n        List: listProps => /*#__PURE__*/_jsxDEV(Groups, { ...listProps,\n          type: \"messaging\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 81,\n          columnNumber: 25\n        }, this),\n        Preview: previewProps => /*#__PURE__*/_jsxDEV(PreList, { ...previewProps,\n          type: \"messaging\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 87,\n          columnNumber: 25\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 77,\n        columnNumber: 16\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 58,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true);\n}\n\n_c3 = GroupList;\nexport default GroupList;\n\nvar _c, _c2, _c3;\n\n$RefreshReg$(_c, \"ListHeader\");\n$RefreshReg$(_c2, \"IconsHolder\");\n$RefreshReg$(_c3, \"GroupList\");","map":{"version":3,"sources":["/home/dan/Documents/projectv2/front/src/components/GroupList.jsx"],"names":["React","Cookies","useChatContext","ChannelList","icon1","icon2","GroupFinder","Groups","PreList","ListHeaderStyle","color","padding","display","justifyContent","alignItems","titleStyle","fontFamily","fontStyle","fontWeight","fontSize","lineHeight","ListHeader","IconsHolder","GroupList","listProps","previewProps"],"mappings":"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","sourcesContent":["import React from 'react'\nimport Cookies from 'universal-cookie';\nimport { useChatContext, ChannelList } from 'stream-chat-react'\nimport icon1 from '../Stuff/icon1.png'\nimport icon2 from '../Stuff/icon2.png'\nimport GroupFinder from './GroupFinder';\nimport Groups from './Groups';\nimport PreList from './PreList';\n\n\nvar ListHeaderStyle = {\n    color: 'red',\n    padding: \"0 20px\",\n    display: \"flex\",\n    justifyContent: \"space-between\",\n    alignItems: \"center\"\n\n  };\n//We can use inline styles by creating a json of styles and setting style attribute to them inline\nvar titleStyle = {\n    fontFamily: \"sans-serif\",\n    fontStyle: \"normal\",\n    fontWeight: \"bold\",\n    fontSize: \"18px\",\n    lineHeight: \"28px\",\n}\n\nfunction ListHeader(){ \n    return (\n    <div style={ListHeaderStyle}>\n        <p style={titleStyle} >Groups:</p>\n\n    </div>\n    )\n}\n\nfunction IconsHolder() {\n    return (\n    <div className=\"icon_side_container\">\n        <div className=\"icon1\">\n            <img className ='iconimg1' src={icon1} alt=\"appIcon\" width=\"30\"/>\n        </div>\n        <div className=\"icon2\">\n            <img className='iconimg2' src={icon2} alt=\"LogoutIcon\" width=\"30\"/>\n        </div>\n    </div>\n    )\n}\n//We have our icon bar that we render, we then place the group container header and holder. We use the stream API\n// ChannelList component to display channels, but we create our own group list component of which we pass to the \n// api's channel component as a function of the listProp prop\n// Preview and Group list are optional, if not provided, stream chat provides its own channel list\n// First preview shows groups, the second shows direct messaging\nfunction GroupList(){\n    return (\n        <>\n           <IconsHolder />\n            <div className =\"group-list-wrapper\"> \n               <ListHeader />\n               <GroupFinder /> \n               <ChannelList\n                    filters={()=>{}}\n                    channelRenderFilterFn={()=>{}}\n                    List={(listProps) => (\n                        <Groups \n                            {...listProps}\n                            type=\"team\"\n                        />\n                    )}\n                    Preview={(previewProps) => (\n                        <PreList\n                            {... previewProps}\n                            type=\"team\"\n                        />\n                    )}\n               />\n               <ChannelList\n                    filters={()=>{}}\n                    channelRenderFilterFn={()=>{}}\n                    List={(listProps) => (\n                        <Groups \n                            {...listProps}\n                            type=\"messaging\"\n                        />\n                    )}\n                    Preview={(previewProps) => (\n                        <PreList\n                            {... previewProps}\n                            type=\"messaging\"\n                        />\n                    )}\n               />\n            </div>\n        </>\n    )\n}\n\nexport default GroupList\n"]},"metadata":{},"sourceType":"module"}