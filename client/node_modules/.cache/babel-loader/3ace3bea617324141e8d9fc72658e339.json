{"ast":null,"code":"var _jsxFileName = \"/home/dan/Documents/Untitled Folder/361Project1-master/client/src/components/UserList.jsx\",\n    _s = $RefreshSig$(),\n    _s2 = $RefreshSig$();\n\nimport React, { useEffect, useState } from 'react';\nimport { useChatChannel, useChatContext } from 'stream-chat-react'; // Column flex box\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar channelStyle = {\n  display: \"flex\",\n  flexDirection: \"column\",\n  height: \"100%\"\n}; // style for the heade, justify content space between sets paragraphs oppostie\n\nvar headerStyle = {\n  display: \"flex\",\n  alignItems: \"center\",\n  margin: \"0px 20px\",\n  justifyContent: \"space-between\"\n}; // Justify space here makes sure the name shows up on the left, and the invite icon shows up on the right\n\nvar ListItemUserWrapper = {\n  display: \"flex\",\n  alignItems: \"center\",\n  margin: \"0px 20px\",\n  justifyContent: \"space-between\"\n}; // style for user list wrapper\n\nvar ListItemUserWrapperName = {\n  display: \"flex\",\n  alignItems: \"center\",\n  flex: \"2\",\n  textAlign: \"left\"\n}; // style for the  user list invite box\n\nvar emptyCheck = {\n  height: \"28px\",\n  width: \"28px\",\n  background: \"#f7f6f8\",\n  border: \"2px solid black\",\n  borderRadius: \"14px\",\n  boxSizing: \"border-box\",\n  marginLeft: \"4px\",\n  cursor: 'pointer'\n}; // style for when the circle is checked for users\n\nvar Checked = {\n  height: \"28px\",\n  width: \"28px\",\n  background: \"green\",\n  border: \"2px solid black\",\n  borderRadius: \"14px\",\n  boxSizing: \"border-box\",\n  marginLeft: \"4px\",\n  cursor: 'pointer'\n}; // Wrapper for the list, has access to children, to bring rendered components down to render list in this component\n\nfunction MasterList({\n  children\n}) {\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    style: channelStyle,\n    children: [/*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 61,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      style: headerStyle,\n      children: [/*#__PURE__*/_jsxDEV(\"span\", {\n        children: \"Members\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 63,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n        children: \"Group Invitation\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 64,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 62,\n      columnNumber: 13\n    }, this), children]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 60,\n    columnNumber: 9\n  }, this);\n} // Component to generate items appearing in the list\n\n\n_c = MasterList;\n\nfunction ListItemUser({\n  user,\n  setCheckedUsers\n}) {\n  _s();\n\n  const [checked, setChecked] = useState(false);\n\n  function detectCheck() {\n    //If we detect a check, we filter out this user from the list of checked users in the createChannel components state\n    if (checked == true) {\n      setCheckedUsers(prevUsers => prevUsers.filter(prevUser => prevUser !== user.id));\n    } //else, we keep the previous list and add this user id to it\n    else {\n        setCheckedUsers(prevUsers => [...prevUsers, user.id]);\n      } //When clicking, we set checked to the opposite of what is currently checked\n\n\n    setChecked(!checked);\n  } // Return name or ID, render either the empty check or the filled in green box telling us the selection is active\n\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    style: ListItemUserWrapper,\n    onClick: detectCheck,\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      style: ListItemUserWrapperName,\n      children: /*#__PURE__*/_jsxDEV(\"p\", {\n        children: user.name || user.id\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 92,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 91,\n      columnNumber: 13\n    }, this), checked ? /*#__PURE__*/_jsxDEV(\"div\", {\n      style: Checked\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 96,\n      columnNumber: 24\n    }, this) : /*#__PURE__*/_jsxDEV(\"div\", {\n      style: emptyCheck\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 96,\n      columnNumber: 54\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 90,\n    columnNumber: 9\n  }, this);\n} // userlist component, \n\n\n_s(ListItemUser, \"OiiR1BYWvMsLHMiD2uYkeM3TCO0=\");\n\n_c2 = ListItemUser;\n\nfunction UserList({\n  setCheckedUsers\n}) {\n  _s2();\n\n  // get client instance\n  const {\n    client\n  } = useChatContext(); // state for user list\n\n  const [users, setUsers] = useState([]); // State for loading user list\n\n  const [loading, setLoading] = useState(false); //state for no users\n\n  const [empty, setEmpty] = useState(false); //errir detectuib state\n\n  const [err, setErr] = useState(false); // needed for async requests in this instance, render the user list once after users returned\n\n  useEffect(() => {\n    async function getUsers() {\n      if (loading) return; //If we are already getting the list, don't keep trying to get it\n      //loading set to true for the try catch block, where we query users from stream chat \n\n      setLoading(true); //Async call to the stream chat client, filter out our own user, set range of users\n\n      try {\n        const response = await client.queryUsers({\n          id: {\n            $ne: client.userID\n          }\n        }, // query users from stream chats current context, exclude the logged in user\n        {\n          id: 1\n        }, {\n          limit: 10\n        }); //If response has entries, set users array to the response or set empty flag as true\n\n        if (response.users.length) {\n          setUsers(response.users);\n        } else {\n          setEmpty(true);\n        }\n      } catch (error) {\n        setErr(true);\n      }\n\n      setLoading(false); // We have finished retreiving the user list into the use states \n    }\n\n    if (client) getUsers(); //empty array ensures use effect only runs after the first render is detected\n  }, []);\n\n  if (err) {\n    return /*#__PURE__*/_jsxDEV(MasterList, {\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        children: \" Issue loading users \"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 146,\n        columnNumber: 11\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 145,\n      columnNumber: 17\n    }, this);\n  } // display is user list is empty\n\n\n  if (empty) {\n    return /*#__PURE__*/_jsxDEV(MasterList, {\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        children: \" No members available \"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 153,\n        columnNumber: 11\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 152,\n      columnNumber: 17\n    }, this);\n  } //return the master list component wrapping a list item generated for ever user present in the users state array\n\n\n  return /*#__PURE__*/_jsxDEV(MasterList, {\n    children: loading ? /*#__PURE__*/_jsxDEV(\"p\", {\n      children: \"Loading Invitation Page\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 161,\n      columnNumber: 9\n    }, this) : users === null || users === void 0 ? void 0 : users.map((user, i) => /*#__PURE__*/_jsxDEV(ListItemUser, {\n      index: i,\n      user: user,\n      setCheckedUsers: setCheckedUsers\n    }, user.id, false, {\n      fileName: _jsxFileName,\n      lineNumber: 165,\n      columnNumber: 17\n    }, this))\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 159,\n    columnNumber: 5\n  }, this);\n}\n\n_s2(UserList, \"93sINmLaSwjVKoOAW/uChnlX+To=\", false, function () {\n  return [useChatContext];\n});\n\n_c3 = UserList;\nexport default UserList;\n\nvar _c, _c2, _c3;\n\n$RefreshReg$(_c, \"MasterList\");\n$RefreshReg$(_c2, \"ListItemUser\");\n$RefreshReg$(_c3, \"UserList\");","map":{"version":3,"sources":["/home/dan/Documents/Untitled Folder/361Project1-master/client/src/components/UserList.jsx"],"names":["React","useEffect","useState","useChatChannel","useChatContext","channelStyle","display","flexDirection","height","headerStyle","alignItems","margin","justifyContent","ListItemUserWrapper","ListItemUserWrapperName","flex","textAlign","emptyCheck","width","background","border","borderRadius","boxSizing","marginLeft","cursor","Checked","MasterList","children","ListItemUser","user","setCheckedUsers","checked","setChecked","detectCheck","prevUsers","filter","prevUser","id","name","UserList","client","users","setUsers","loading","setLoading","empty","setEmpty","err","setErr","getUsers","response","queryUsers","$ne","userID","limit","length","error","map","i"],"mappings":"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","sourcesContent":["import React, {useEffect, useState} from 'react'\nimport {useChatChannel, useChatContext} from 'stream-chat-react'\n\n// Column flex box\nvar channelStyle = {\n    display: \"flex\",\n    flexDirection: \"column\",\n    height: \"100%\"\n  };\n// style for the heade, justify content space between sets paragraphs oppostie\n  var headerStyle={\n    display: \"flex\",\n    alignItems: \"center\",\n    margin: \"0px 20px\",\n    justifyContent: \"space-between\"\n  };\n\n// Justify space here makes sure the name shows up on the left, and the invite icon shows up on the right\n  var ListItemUserWrapper={\n    display: \"flex\",\n    alignItems: \"center\",\n    margin: \"0px 20px\",\n    justifyContent: \"space-between\"\n  };\n  // style for user list wrapper\n  var ListItemUserWrapperName={\n    display: \"flex\",\n    alignItems: \"center\",\n    flex: \"2\",\n    textAlign: \"left\"\n  };\n\n  // style for the  user list invite box\n  var emptyCheck = {\n    height: \"28px\",\n    width: \"28px\",\n    background: \"#f7f6f8\",\n    border: \"2px solid black\",\n    borderRadius: \"14px\",\n    boxSizing: \"border-box\",\n    marginLeft: \"4px\",\n    cursor:'pointer'\n  }\n  // style for when the circle is checked for users\n  var Checked = {\n    height: \"28px\",\n    width: \"28px\",\n    background: \"green\",\n    border: \"2px solid black\",\n    borderRadius: \"14px\",\n    boxSizing: \"border-box\",\n    marginLeft: \"4px\",\n    cursor:'pointer'\n  }\n\n\n// Wrapper for the list, has access to children, to bring rendered components down to render list in this component\nfunction MasterList({ children }){\n    return(\n        <div style={channelStyle}>\n            <br></br>\n            <div style={headerStyle}>\n                <span>Members</span>\n                <span>Group Invitation</span>\n            </div>\n\n            {children}\n        </div>\n    )\n}\n\n// Component to generate items appearing in the list\nfunction ListItemUser({ user, setCheckedUsers}){\n    const [checked, setChecked] = useState(false)\n    function detectCheck(){\n        //If we detect a check, we filter out this user from the list of checked users in the createChannel components state\n        if(checked == true){\n            setCheckedUsers((prevUsers) => prevUsers.filter((prevUser) => prevUser !== user.id))\n        }\n        //else, we keep the previous list and add this user id to it\n        else{\n            setCheckedUsers((prevUsers) => [...prevUsers, user.id])\n        }\n\n        //When clicking, we set checked to the opposite of what is currently checked\n        setChecked(!checked)\n    }\n    // Return name or ID, render either the empty check or the filled in green box telling us the selection is active\n    return(\n        <div style={ListItemUserWrapper} onClick={detectCheck}>\n            <div style={ListItemUserWrapperName}>\n                <p>\n                    {user.name || user.id}\n                </p>\n            </div>\n            {checked ? <div style={Checked}></div> : <div style={emptyCheck}></div>}\n        </div>\n    )\n}\n\n// userlist component, \nfunction UserList({setCheckedUsers}){ \n    // get client instance\n    const {client} = useChatContext()\n    // state for user list\n    const [users, setUsers] = useState([]);\n    // State for loading user list\n    const [loading, setLoading] = useState(false);\n    //state for no users\n    const [empty, setEmpty] = useState(false);\n    //errir detectuib state\n    const [err, setErr] = useState(false)\n\n    // needed for async requests in this instance, render the user list once after users returned\n    useEffect(()=> {\n        async function getUsers(){\n            if(loading) return //If we are already getting the list, don't keep trying to get it\n            //loading set to true for the try catch block, where we query users from stream chat \n            setLoading(true) \n            \n            //Async call to the stream chat client, filter out our own user, set range of users\n            try {\n                const response = await client.queryUsers(\n                    {id: {$ne :client.userID}}, // query users from stream chats current context, exclude the logged in user\n                    {id : 1},\n                    {limit: 10}\n                );\n                    //If response has entries, set users array to the response or set empty flag as true\n                if(response.users.length) {\n                    setUsers(response.users)\n                } else {\n                    setEmpty(true)\n                }\n            } catch (error) {\n                setErr(true)\n\n            }\n            setLoading(false) // We have finished retreiving the user list into the use states \n        }\n\n        if(client) getUsers()\n//empty array ensures use effect only runs after the first render is detected\n    },[])\n    if(err){\n        return (<MasterList>\n          <div> Issue loading users </div>\n        </MasterList>\n        )\n    }\n    // display is user list is empty\n    if(empty){\n        return (<MasterList>\n          <div> No members available </div>\n        </MasterList>\n        )\n    }\n    //return the master list component wrapping a list item generated for ever user present in the users state array\n    return (\n    <MasterList>\n        {loading ? \n        <p>\n            Loading Invitation Page\n        </p> : \n            (users?.map((user, i)=>(\n                <ListItemUser index={i} key={user.id} user={user} setCheckedUsers={setCheckedUsers}/>\n            ))\n            )}\n    </MasterList>\n\n    )\n}\n\nexport default UserList\n"]},"metadata":{},"sourceType":"module"}