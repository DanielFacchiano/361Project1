{"ast":null,"code":"var _jsxFileName = \"/home/dan/Documents/projectv2/client/src/components/ChatPage.jsx\",\n    _s = $RefreshSig$();\n\nimport React from 'react';\nimport { useChatContext } from \"stream-chat-react\";\nimport { Channel } from \"stream-chat-react\";\nimport CreateChannel from './CreateChannel';\nimport ChannelOptions from './ChannelOptions';\nimport TeamMessage from './TeamMessage';\nimport ChannelInner from './ChannelInner'; // style for main chat page container for all states\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar channelStyle = {\n  height: \"100%\",\n  width: \"100%\"\n}; // Chat history style\n\nvar EmptyChannelStyle = {\n  display: \"flex\",\n  height: \"100%\",\n  flexDirection: \"column\"\n}; // for previous history messages\n\nvar EmptyChannelParagraphStyle = {\n  fontFamily: \"sans-serif\",\n  fontWeight: \"bold\",\n  fontSize: \"18px\",\n  marginBottom: \"10px\"\n}; //send preview style\n\nvar EmptyChannelParagraphTwoStyle = {\n  fontSize: \"14px\",\n  lineHeight: \"120%\",\n  margin: \"0\"\n}; //CHat page component function, has various state change props\n\nfunction ChatPage({\n  newChannel,\n  openOptions,\n  setNewChannel,\n  setOpenOptions,\n  createType\n}) {\n  _s();\n\n  //get channel from context\n  const {\n    channel\n  } = useChatContext(); //if new channel, return the createChannel component\n\n  if (newChannel) {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      style: channelStyle,\n      children: /*#__PURE__*/_jsxDEV(CreateChannel, {\n        createType: createType,\n        setNewChannel: setNewChannel\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 44,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 43,\n      columnNumber: 13\n    }, this);\n  } //if the option state is true, open the options component\n\n\n  if (openOptions) {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      style: channelStyle,\n      children: /*#__PURE__*/_jsxDEV(ChannelOptions, {\n        setOpenOptions: setOpenOptions\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 52,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 51,\n      columnNumber: 13\n    }, this);\n  } //needed for stream api channel component to function\n\n\n  const noState = () => /*#__PURE__*/_jsxDEV(\"div\", {\n    style: EmptyChannelStyle,\n    children: [/*#__PURE__*/_jsxDEV(\"p\", {\n      style: EmptyChannelParagraphStyle,\n      children: \"Chat History Start: \"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 59,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n      style: EmptyChannelParagraphTwoStyle,\n      children: \"Send stuff\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 60,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 58,\n    columnNumber: 9\n  }, this); // Set up chat page, messages for message list provided by message props passed into Built team message\n  // component. Pass options to inner for option opening via title button\n\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    style: channelStyle,\n    children: /*#__PURE__*/_jsxDEV(Channel, {\n      EmptyStateIndicator: noState,\n      Message: (messageProps, i) => /*#__PURE__*/_jsxDEV(TeamMessage, { ...messageProps\n      }, i, false, {\n        fileName: _jsxFileName,\n        lineNumber: 69,\n        columnNumber: 47\n      }, this),\n      children: /*#__PURE__*/_jsxDEV(ChannelInner, {\n        setOpenOptions: setOpenOptions\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 71,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 67,\n      columnNumber: 13\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 66,\n    columnNumber: 9\n  }, this);\n}\n\n_s(ChatPage, \"Y8G6UshdUXxX4l0KFZoPlRCuJ9A=\", false, function () {\n  return [useChatContext];\n});\n\n_c = ChatPage;\nexport default ChatPage;\n\nvar _c;\n\n$RefreshReg$(_c, \"ChatPage\");","map":{"version":3,"sources":["/home/dan/Documents/projectv2/client/src/components/ChatPage.jsx"],"names":["React","useChatContext","Channel","CreateChannel","ChannelOptions","TeamMessage","ChannelInner","channelStyle","height","width","EmptyChannelStyle","display","flexDirection","EmptyChannelParagraphStyle","fontFamily","fontWeight","fontSize","marginBottom","EmptyChannelParagraphTwoStyle","lineHeight","margin","ChatPage","newChannel","openOptions","setNewChannel","setOpenOptions","createType","channel","noState","messageProps","i"],"mappings":";;;AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAAQC,cAAR,QAA6B,mBAA7B;AACA,SAAQC,OAAR,QAAsB,mBAAtB;AACA,OAAOC,aAAP,MAA0B,iBAA1B;AACA,OAAOC,cAAP,MAA2B,kBAA3B;AACA,OAAOC,WAAP,MAAwB,eAAxB;AACA,OAAOC,YAAP,MAAyB,gBAAzB,C,CAEA;;;AACA,IAAIC,YAAY,GAAG;AACfC,EAAAA,MAAM,EAAE,MADO;AAEfC,EAAAA,KAAK,EAAE;AAFQ,CAAnB,C,CAKE;;AACF,IAAIC,iBAAiB,GAAG;AACpBC,EAAAA,OAAO,EAAE,MADW;AAEpBH,EAAAA,MAAM,EAAE,MAFY;AAGpBI,EAAAA,aAAa,EAAE;AAHK,CAAxB,C,CAKA;;AACE,IAAIC,0BAA0B,GAAG;AAC/BC,EAAAA,UAAU,EAAE,YADmB;AAE/BC,EAAAA,UAAU,EAAE,MAFmB;AAG/BC,EAAAA,QAAQ,EAAE,MAHqB;AAI/BC,EAAAA,YAAY,EAAE;AAJiB,CAAjC,C,CAMA;;AACA,IAAIC,6BAA6B,GAAG;AAClCF,EAAAA,QAAQ,EAAE,MADwB;AAElCG,EAAAA,UAAU,EAAE,MAFsB;AAGlCC,EAAAA,MAAM,EAAE;AAH0B,CAApC,C,CAKF;;AACA,SAASC,QAAT,CACI;AAAEC,EAAAA,UAAF;AAAcC,EAAAA,WAAd;AAA2BC,EAAAA,aAA3B;AAA0CC,EAAAA,cAA1C;AAA0DC,EAAAA;AAA1D,CADJ,EAEM;AAAA;;AACE;AACJ,QAAM;AAAEC,IAAAA;AAAF,MAAc1B,cAAc,EAAlC,CAFE,CAGN;;AACI,MAAGqB,UAAH,EAAc;AACV,wBACI;AAAK,MAAA,KAAK,EAAEf,YAAZ;AAAA,6BACI,QAAC,aAAD;AAAe,QAAA,UAAU,EAAEmB,UAA3B;AAAuC,QAAA,aAAa,EAAEF;AAAtD;AAAA;AAAA;AAAA;AAAA;AADJ;AAAA;AAAA;AAAA;AAAA,YADJ;AAKH,GAVC,CAWN;;;AACI,MAAGD,WAAH,EAAe;AACX,wBACI;AAAK,MAAA,KAAK,EAAEhB,YAAZ;AAAA,6BACI,QAAC,cAAD;AAAgB,QAAA,cAAc,EAAEkB;AAAhC;AAAA;AAAA;AAAA;AAAA;AADJ;AAAA;AAAA;AAAA;AAAA,YADJ;AAKH,GAlBC,CAmBF;;;AACA,QAAMG,OAAO,GAAC,mBACV;AAAK,IAAA,KAAK,EAAElB,iBAAZ;AAAA,4BACI;AAAG,MAAA,KAAK,EAAEG,0BAAV;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YADJ,eAEI;AAAG,MAAA,KAAK,EAAEK,6BAAV;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YAFJ;AAAA;AAAA;AAAA;AAAA;AAAA,UADJ,CApBE,CA0BE;AACA;;;AACJ,sBACI;AAAK,IAAA,KAAK,EAAEX,YAAZ;AAAA,2BACI,QAAC,OAAD;AACI,MAAA,mBAAmB,EAAEqB,OADzB;AAEI,MAAA,OAAO,EAAE,CAACC,YAAD,EAAeC,CAAf,kBAAqB,QAAC,WAAD,OAAyBD;AAAzB,SAAkBC,CAAlB;AAAA;AAAA;AAAA;AAAA,cAFlC;AAAA,6BAII,QAAC,YAAD;AAAc,QAAA,cAAc,EAAEL;AAA9B;AAAA;AAAA;AAAA;AAAA;AAJJ;AAAA;AAAA;AAAA;AAAA;AADJ;AAAA;AAAA;AAAA;AAAA,UADJ;AAUH;;GAxCQJ,Q;UAIepB,c;;;KAJfoB,Q;AA0CT,eAAeA,QAAf","sourcesContent":["import React from 'react'\nimport {useChatContext} from \"stream-chat-react\"\nimport {Channel} from \"stream-chat-react\"\nimport CreateChannel from './CreateChannel';\nimport ChannelOptions from './ChannelOptions';\nimport TeamMessage from './TeamMessage';\nimport ChannelInner from './ChannelInner';\n\n// style for main chat page container for all states\nvar channelStyle = {\n    height: \"100%\",\n    width: \"100%\",\n  };\n\n  // Chat history style\nvar EmptyChannelStyle = {\n    display: \"flex\",\n    height: \"100%\",\n    flexDirection: \"column\",\n  };\n// for previous history messages\n  var EmptyChannelParagraphStyle = {\n    fontFamily: \"sans-serif\",\n    fontWeight: \"bold\",\n    fontSize: \"18px\",\n    marginBottom: \"10px\"\n  };\n  //send preview style\n  var EmptyChannelParagraphTwoStyle = {\n    fontSize: \"14px\",\n    lineHeight: \"120%\",\n    margin: \"0\",\n  };\n//CHat page component function, has various state change props\nfunction ChatPage(\n    { newChannel, openOptions, setNewChannel, setOpenOptions, createType }\n    ) {\n        //get channel from context\n    const { channel } = useChatContext();\n//if new channel, return the createChannel component\n    if(newChannel){\n        return(\n            <div style={channelStyle}>\n                <CreateChannel createType={createType} setNewChannel={setNewChannel} />\n            </div>\n        )\n    }\n//if the option state is true, open the options component\n    if(openOptions){\n        return(\n            <div style={channelStyle}>\n                <ChannelOptions setOpenOptions={setOpenOptions}/>\n            </div>\n        )\n    }\n    //needed for stream api channel component to function\n    const noState=() => (\n        <div style={EmptyChannelStyle}>\n            <p style={EmptyChannelParagraphStyle}>Chat History Start: </p>\n            <p style={EmptyChannelParagraphTwoStyle}>Send stuff</p>\n        </div>\n    )\n        // Set up chat page, messages for message list provided by message props passed into Built team message\n        // component. Pass options to inner for option opening via title button\n    return (\n        <div style={channelStyle}>\n            <Channel\n                EmptyStateIndicator={noState}\n                Message={(messageProps, i) => <TeamMessage key={i} {...messageProps} />}\n            >\n                <ChannelInner setOpenOptions={setOpenOptions} />\n            </Channel >\n        </div>\n    )\n}\n\nexport default ChatPage\n"]},"metadata":{},"sourceType":"module"}