{"ast":null,"code":"var _jsxFileName = \"/home/dan/Documents/Untitled Folder/361Project1-master/client/src/components/ChannelInner.jsx\",\n    _s = $RefreshSig$(),\n    _s2 = $RefreshSig$();\n\nimport React, { useState } from 'react';\nimport { MessageList, MessageInput, Thread, useChannelActionContext, useChannelStateContext, useChatContext, Window } from 'stream-chat-react'; // This component is made up of a bunch of stream chat components\n\nimport { ChannelInfo } from '../Stuff/ChannelInfo'; // component from stream chat api, needed to update context after channel\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport const Contexto = /*#__PURE__*/React.createContext({}); // .team-channel-header__name-wrapper {\n// Style for the header,\n// Style for the group channel title and header\n\nvar channel_header = {\n  fontFamily: \"sans-serif\",\n  fontWeight: \"bold\",\n  fontSize: \"18px\",\n  color: \"#2c2c30\",\n  marginRight: \"8px\"\n}; // Style for the \"users in group section\"\n\nvar right_text = {\n  fontFamily: \"sans-serif\",\n  fontSize: \"14px\",\n  color: \"#858688\"\n}; // Style for above inside\n\nvar right_text_inner = {\n  display: \"flex\",\n  paddingLeft: \"12px\"\n}; // container height for header\n\nvar header_container = {\n  height: \"72px\"\n}; // Need open options prop for options button at top of page\n\nfunction ChannelInner({\n  setOpenOptions\n}) {\n  _s();\n\n  // State to determine if \n  const [messageState, setMessageState] = useState(false);\n  const {\n    postMessage\n  } = useChannelActionContext(); // required handler for the stream chat message component\n\n  const SubmitHandler = message => {\n    var _message$parent;\n\n    var updatedMessage = {\n      mentioned_users: message.mentioned_users,\n      text: message.text,\n      parent: message.parent,\n      parent_id: (_message$parent = message.parent) === null || _message$parent === void 0 ? void 0 : _message$parent.id,\n      attachments: message.attachments\n    };\n\n    if (postMessage == true) {\n      postMessage(updatedMessage);\n      setMessageState(false);\n    }\n  }; // Get the components that make up our main chat page. We have a header, a message list, and an input for messages. all from the api\n\n\n  return /*#__PURE__*/_jsxDEV(Contexto.Provider, {\n    value: {\n      messageState,\n      setMessageState\n    },\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      style: {\n        display: 'flex',\n        width: '100%'\n      },\n      children: [/*#__PURE__*/_jsxDEV(Window, {\n        children: [/*#__PURE__*/_jsxDEV(TeamChannelHeader, {\n          setOpenOptions: setOpenOptions\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 67,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(MessageList, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 68,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(MessageInput, {\n          SubmitHandler: SubmitHandler\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 69,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 66,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Thread, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 71,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 65,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 64,\n    columnNumber: 5\n  }, this);\n}\n\n_s(ChannelInner, \"eh0TneheYUWsJM7Hw/7H+mhVyvQ=\", false, function () {\n  return [useChannelActionContext];\n});\n\n_c = ChannelInner;\n; // Channel Header component, derefrence components from chat and channel contexts for proper titles and info\n\nconst TeamChannelHeader = ({\n  setOpenOptions\n}) => {\n  _s2();\n\n  var {\n    channel,\n    watcher_count\n  } = useChannelStateContext();\n  var {\n    client\n  } = useChatContext(); // Determines header of channel message feed\n\n  const MessagingHeader = () => {\n    // get channel members where they arent the user\n    var members = Object.values(channel.state.members).filter(({\n      user\n    }) => user.id !== client.userID); // if were in the DMs just say DMs\n\n    if (channel.type === 'messaging') {\n      return /*#__PURE__*/_jsxDEV(\"div\", {\n        style: channel_header,\n        children: \"Direct Messaging\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 88,\n        columnNumber: 11\n      }, this);\n    } // else we will return the channel name header for the channel\n    // We add the options icon to set channel options manually\n\n\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"channel-inner-header-wrap2\",\n      children: [/*#__PURE__*/_jsxDEV(\"p\", {\n        style: channel_header,\n        children: [\"Group: \", channel.data.name, \" \"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 97,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n        style: {\n          display: 'flex'\n        },\n        onClick: () => setOpenOptions(true),\n        children: /*#__PURE__*/_jsxDEV(ChannelInfo, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 99,\n          columnNumber: 13\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 98,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 96,\n      columnNumber: 9\n    }, this);\n  }; // function to get the users watching the chat, posts this number to header\n\n\n  const getWatcherText = watchers => {\n    if (!watchers) return 'Nobody is online';else {\n      return `${watchers} users online in group`;\n    }\n  }; // Return the  Header component w container\n\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    style: header_container,\n    children: [/*#__PURE__*/_jsxDEV(MessagingHeader, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 114,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      style: right_text_inner,\n      children: /*#__PURE__*/_jsxDEV(\"p\", {\n        style: right_text,\n        children: getWatcherText(watcher_count)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 116,\n        columnNumber: 11\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 115,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 113,\n    columnNumber: 7\n  }, this);\n};\n\n_s2(TeamChannelHeader, \"Tb4arasuDJW0BnLDUr6/wz198yQ=\", false, function () {\n  return [useChannelStateContext, useChatContext];\n});\n\n_c2 = TeamChannelHeader;\nexport default ChannelInner;\n\nvar _c, _c2;\n\n$RefreshReg$(_c, \"ChannelInner\");\n$RefreshReg$(_c2, \"TeamChannelHeader\");","map":{"version":3,"sources":["/home/dan/Documents/Untitled Folder/361Project1-master/client/src/components/ChannelInner.jsx"],"names":["React","useState","MessageList","MessageInput","Thread","useChannelActionContext","useChannelStateContext","useChatContext","Window","ChannelInfo","Contexto","createContext","channel_header","fontFamily","fontWeight","fontSize","color","marginRight","right_text","right_text_inner","display","paddingLeft","header_container","height","ChannelInner","setOpenOptions","messageState","setMessageState","postMessage","SubmitHandler","message","updatedMessage","mentioned_users","text","parent","parent_id","id","attachments","width","TeamChannelHeader","channel","watcher_count","client","MessagingHeader","members","Object","values","state","filter","user","userID","type","data","name","getWatcherText","watchers"],"mappings":"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","sourcesContent":["import React, { useState } from 'react';\nimport { MessageList, MessageInput, Thread,  useChannelActionContext, useChannelStateContext, useChatContext, Window} from 'stream-chat-react';\n// This component is made up of a bunch of stream chat components\nimport {ChannelInfo} from '../Stuff/ChannelInfo'\n// component from stream chat api, needed to update context after channel\nexport const Contexto = React.createContext({});\n// .team-channel-header__name-wrapper {\n // Style for the header,\n\n\n// Style for the group channel title and header\nvar channel_header=\n{\n  fontFamily: \"sans-serif\",\n  fontWeight: \"bold\",\n  fontSize: \"18px\",\n  color: \"#2c2c30\",\n  marginRight: \"8px\"\n}\n\n// Style for the \"users in group section\"\nvar right_text = {\n  fontFamily:\"sans-serif\",\n  fontSize: \"14px\",\n  color: \"#858688\"\n}\n\n// Style for above inside\nvar right_text_inner= {\n  display: \"flex\",\n  paddingLeft: \"12px\"\n}\n// container height for header\nvar header_container=\n{\n  height: \"72px\"\n}\n\n// Need open options prop for options button at top of page\nfunction ChannelInner({ setOpenOptions }){\n\n  // State to determine if \n  const [messageState, setMessageState] = useState(false);\n\n  const { postMessage } = useChannelActionContext();\n  // required handler for the stream chat message component\n  const SubmitHandler = (message) => {\n    var updatedMessage = {\n      mentioned_users: message.mentioned_users,\n      text: message.text,\n      parent: message.parent,\n      parent_id: message.parent?.id,\n      attachments: message.attachments,\n    };\n\n    \n    if (postMessage == true) {\n      postMessage(updatedMessage);\n      setMessageState(false);\n    }\n  };\n// Get the components that make up our main chat page. We have a header, a message list, and an input for messages. all from the api\n  return (\n    <Contexto.Provider value={{ messageState, setMessageState }}>\n      <div style={{ display: 'flex', width: '100%' }}>\n        <Window>\n          <TeamChannelHeader setOpenOptions={setOpenOptions} />\n          <MessageList />\n          <MessageInput SubmitHandler={SubmitHandler} />\n        </Window>\n        <Thread />\n      </div>\n    </Contexto.Provider>\n  );\n};\n// Channel Header component, derefrence components from chat and channel contexts for proper titles and info\nconst TeamChannelHeader = ({ setOpenOptions }) => {\n    var { channel, watcher_count } = useChannelStateContext();\n    var { client } = useChatContext();\n  \n    // Determines header of channel message feed\n    const MessagingHeader = () => {\n      // get channel members where they arent the user\n      var members = Object.values(channel.state.members).filter(({ user }) => user.id !== client.userID);\n      // if were in the DMs just say DMs\n      if(channel.type === 'messaging') {\n        return (\n          <div style = {channel_header}>\n              Direct Messaging\n          </div>\n        );\n      }\n      // else we will return the channel name header for the channel\n      // We add the options icon to set channel options manually\n      return (\n        <div className='channel-inner-header-wrap2'>\n          <p style={channel_header}>Group: {channel.data.name} </p>\n          <span style={{ display: 'flex' }} onClick={() => setOpenOptions(true)}>\n            <ChannelInfo />\n          </span>\n        </div>\n      );\n    };\n    // function to get the users watching the chat, posts this number to header\n    const getWatcherText = (watchers) => {\n      if (!watchers) return 'Nobody is online';\n      else{\n      return `${watchers} users online in group`;\n    }\n    };\n    // Return the  Header component w container\n    return (\n      <div style={header_container}>\n        <MessagingHeader />\n        <div style={right_text_inner}>\n          <p style={right_text}>{getWatcherText(watcher_count)}</p>\n        </div>\n      </div>\n    );\n  };\n\n  export default ChannelInner;"]},"metadata":{},"sourceType":"module"}