{"ast":null,"code":"var _jsxFileName = \"/home/dan/Documents/Untitled Folder/361Project1-master/client/src/components/GroupList.jsx\",\n    _s = $RefreshSig$();\n\nimport React from 'react';\nimport Cookies from 'universal-cookie';\nimport { useChatContext } from 'stream-chat-react';\nimport { ChannelList } from 'stream-chat-react';\nimport icon1 from '../Stuff/icon1.png';\nimport icon2 from '../Stuff/icon2.png';\nimport icon3 from '../Stuff/icon3.png';\nimport Groups from './Groups';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst cookies = new Cookies(); // component container style\n//Style for the header at the top of groupList\n\nvar ListHeaderStyle = {\n  color: 'red',\n  padding: \"0 20px\",\n  display: \"flex\",\n  justifyContent: \"space-between\",\n  alignItems: \"center\"\n}; // Function returns the header of the groups side bar \n\nfunction ListHeader() {\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    style: ListHeaderStyle,\n    children: /*#__PURE__*/_jsxDEV(\"h2\", {\n      children: \"Groups:\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 28,\n      columnNumber: 9\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 27,\n    columnNumber: 5\n  }, this);\n} // function holds the image icons in the sidebars buttonbar. Buttons are chat icon, options Cog, and logout symbol\n\n\n_c = ListHeader;\n\nfunction IconsHolder({\n  logout,\n  opts\n}) {\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"icon_side_container\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"icon1\",\n      children: /*#__PURE__*/_jsxDEV(\"img\", {\n        className: \"iconimg1\",\n        src: icon1,\n        width: \"32\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 37,\n        columnNumber: 13\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 36,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"icon2\",\n      onClick: opts,\n      children: [/*#__PURE__*/_jsxDEV(\"span\", {\n        className: \"optionsTooltip\",\n        children: \" Click here to open options for currently open channel\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 42,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(\"img\", {\n        className: \"options\",\n        src: icon3,\n        width: \"32\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 43,\n        columnNumber: 13\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 41,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"icon3\",\n      onClick: logout,\n      children: [/*#__PURE__*/_jsxDEV(\"span\", {\n        className: \"optionsTooltip2\",\n        children: \" Click here to logout and return to the sign in screen\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 48,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(\"img\", {\n        className: \"iconimg2\",\n        src: icon2,\n        width: \"32\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 49,\n        columnNumber: 13\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 47,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 35,\n    columnNumber: 5\n  }, this);\n} //custom filters for the stream chat ChannelList object, returns channels where type is eam\n\n\n_c2 = IconsHolder;\n\nfunction channelFilter(channels) {\n  return channels.filter(channel => channel.type === 'team'); // Return channels where the type is team\n} //custom filters for the stream chat ChannelList object, returns channels where type is messaging\n\n\nfunction messageFilter(channels) {\n  return channels.filter(channel => channel.type === 'messaging'); // Return channels where the type is team\n} //We have our icon bar that we render, we then place the group container header and holder. We use the stream API\n// ChannelList component to display channels, but we create our own group list component of which we pass to the \n// api's channel component as a function of the listProp prop\n// Preview and Group list are optional, if not provided, stream chat provides its own channel list (we use a custom group list(groups))\n// because the built in stream chat component looks very bad and doesnt have add buttons in it.\n// First preview shows groups, the second shows direct messaging\n\n\nfunction GroupList({\n  setNewChannel,\n  setCreateType,\n  newChannel,\n  setOpenOptions,\n  openOptions\n}) {\n  _s();\n\n  const {\n    client\n  } = useChatContext(); // toggle options state on off with the cog symbol\n\n  function opts() {\n    setOpenOptions(!openOptions);\n  } //to logout, we simply clear the cookies. The login page in app.jsx will now trigger, reinitiating sign in\n\n\n  function logout() {\n    cookies.remove('username');\n    cookies.remove('fullname');\n    cookies.remove('token');\n    cookies.remove('userId');\n    cookies.remove('hashedPassword'); //reload Dr.Freeman\n\n    window.location.reload();\n  } // Filter out channels that don't have the user as a member (get users channels)\n\n\n  const filters = {\n    members: {\n      $in: [client.userID]\n    } //Get all channels where our current user is in it\n\n  }; // return the components and there props to form our main grouplist sidebar component\n  // Use stream chats channel list to render channels based upon user membership and team/DM, custom props for filters and display\n  // format Use our own Groups(header) list component for buttons, use stream chats preview components (works great)\n  // Pass render icon buttons, and functions required to change the chatpage state\n\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(IconsHolder, {\n      logout: logout,\n      opts: opts\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 100,\n      columnNumber: 12\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"group-list-wrapper\",\n      children: [/*#__PURE__*/_jsxDEV(ListHeader, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 102,\n        columnNumber: 16\n      }, this), /*#__PURE__*/_jsxDEV(ChannelList, {\n        filters: filters,\n        GroupList: true,\n        channelRenderFilterFn: channelFilter,\n        List: listProps => /*#__PURE__*/_jsxDEV(Groups, { ...listProps,\n          type: \"team\",\n          setNewChannel: setNewChannel,\n          setCreateType: setCreateType,\n          newChannel: newChannel,\n          setOpenOptions: setOpenOptions\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 110,\n          columnNumber: 25\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 106,\n        columnNumber: 16\n      }, this), /*#__PURE__*/_jsxDEV(ChannelList, {\n        filters: filters,\n        channelRenderFilterFn: messageFilter,\n        List: listProps => /*#__PURE__*/_jsxDEV(Groups, { ...listProps,\n          type: \"messaging\",\n          setNewChannel: setNewChannel,\n          setCreateType: setCreateType,\n          newChannel: newChannel,\n          setOpenOptions: setOpenOptions\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 125,\n          columnNumber: 25\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 121,\n        columnNumber: 16\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 101,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true);\n}\n\n_s(GroupList, \"Fx7JWZ5U0K+gy2P/As1o9qsoLNw=\", false, function () {\n  return [useChatContext];\n});\n\n_c3 = GroupList;\nexport default GroupList;\n\nvar _c, _c2, _c3;\n\n$RefreshReg$(_c, \"ListHeader\");\n$RefreshReg$(_c2, \"IconsHolder\");\n$RefreshReg$(_c3, \"GroupList\");","map":{"version":3,"sources":["/home/dan/Documents/Untitled Folder/361Project1-master/client/src/components/GroupList.jsx"],"names":["React","Cookies","useChatContext","ChannelList","icon1","icon2","icon3","Groups","cookies","ListHeaderStyle","color","padding","display","justifyContent","alignItems","ListHeader","IconsHolder","logout","opts","channelFilter","channels","filter","channel","type","messageFilter","GroupList","setNewChannel","setCreateType","newChannel","setOpenOptions","openOptions","client","remove","window","location","reload","filters","members","$in","userID","listProps"],"mappings":"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","sourcesContent":["import React from 'react'\nimport Cookies from 'universal-cookie';\nimport { useChatContext } from 'stream-chat-react'\nimport { ChannelList } from 'stream-chat-react'\n\nimport icon1 from '../Stuff/icon1.png'\nimport icon2 from '../Stuff/icon2.png'\nimport icon3 from '../Stuff/icon3.png'\nimport Groups from './Groups';\nconst cookies = new Cookies();\n\n// component container style\n\n//Style for the header at the top of groupList\nvar ListHeaderStyle = {\n    color: 'red',\n    padding: \"0 20px\",\n    display: \"flex\",\n    justifyContent: \"space-between\",\n    alignItems: \"center\"\n\n  };\n\n// Function returns the header of the groups side bar \nfunction ListHeader(){ \n    return (\n    <div style={ListHeaderStyle}>\n        <h2>Groups:</h2>\n    </div>\n    )\n}\n// function holds the image icons in the sidebars buttonbar. Buttons are chat icon, options Cog, and logout symbol\nfunction IconsHolder({logout, opts}) {\n    return (\n    <div className=\"icon_side_container\">\n        <div className=\"icon1\">\n            <img className ='iconimg1' \n            src={icon1} \n            width=\"32\"/>\n        </div>\n        <div className=\"icon2\" onClick={opts}>\n            <span className=\"optionsTooltip\"> Click here to open options for currently open channel</span>\n            <img className='options' \n            src={icon3}  \n            width=\"32\"/>\n        </div>\n        <div className=\"icon3\" onClick={logout}>\n            <span className=\"optionsTooltip2\"> Click here to logout and return to the sign in screen</span>\n            <img className='iconimg2' \n            src={icon2} \n            width=\"32\"/>\n        </div>\n    </div>\n    )\n}\n//custom filters for the stream chat ChannelList object, returns channels where type is eam\nfunction channelFilter(channels){\n    return channels.filter((channel) => channel.type === 'team' ) // Return channels where the type is team\n}\n//custom filters for the stream chat ChannelList object, returns channels where type is messaging\nfunction messageFilter(channels){\n    return channels.filter((channel) => channel.type === 'messaging' ) // Return channels where the type is team\n}\n\n//We have our icon bar that we render, we then place the group container header and holder. We use the stream API\n// ChannelList component to display channels, but we create our own group list component of which we pass to the \n// api's channel component as a function of the listProp prop\n// Preview and Group list are optional, if not provided, stream chat provides its own channel list (we use a custom group list(groups))\n// because the built in stream chat component looks very bad and doesnt have add buttons in it.\n// First preview shows groups, the second shows direct messaging\nfunction GroupList({setNewChannel, setCreateType, newChannel, setOpenOptions, openOptions }){\n    const { client} = useChatContext();\n// toggle options state on off with the cog symbol\n    function opts() {\n        setOpenOptions(!openOptions)\n    }\n//to logout, we simply clear the cookies. The login page in app.jsx will now trigger, reinitiating sign in\n    function logout(){\n        cookies.remove('username');\n        cookies.remove('fullname');\n        cookies.remove('token');\n        cookies.remove('userId');\n        cookies.remove('hashedPassword');\n\n        //reload Dr.Freeman\n        window.location.reload();\n    }\n// Filter out channels that don't have the user as a member (get users channels)\n    const filters = { \n        members:{$in: [client.userID]} //Get all channels where our current user is in it\n    } \n\n// return the components and there props to form our main grouplist sidebar component\n// Use stream chats channel list to render channels based upon user membership and team/DM, custom props for filters and display\n// format Use our own Groups(header) list component for buttons, use stream chats preview components (works great)\n// Pass render icon buttons, and functions required to change the chatpage state\n    return (\n        <>\n        {/* Render iconholder with the pertinenet state functions */}\n           <IconsHolder logout={logout} opts={opts} />\n            <div className =\"group-list-wrapper\"> \n               <ListHeader />\n                {/* CHannel list Component from streamchat, we tell it what channels we want, \n                first filter gets us channels with the user in it, render filter gets us the team channels\n                of such channels*/}\n               <ChannelList\n                    filters={filters}\n                    GroupList   channelRenderFilterFn={channelFilter}\n                    List={(listProps) => (\n                        <Groups \n                            {...listProps}\n                            type=\"team\"\n                            setNewChannel={setNewChannel}\n                            setCreateType={setCreateType} \n                            newChannel={newChannel}\n                            setOpenOptions={setOpenOptions}\n                        />\n                    )}\n               />\n                {/* Render iconholder with the pertinenet state functions */}\n               <ChannelList\n                    filters={filters}\n                    channelRenderFilterFn={messageFilter}\n                    List={(listProps) => (\n                        <Groups \n                            {...listProps}\n                            type=\"messaging\"\n                            setNewChannel={setNewChannel}\n                            setCreateType={setCreateType} \n                            newChannel={newChannel}\n                            setOpenOptions={setOpenOptions}\n                        />\n                    )}\n               />\n            </div>\n        </>\n    )\n}\nexport default GroupList\n"]},"metadata":{},"sourceType":"module"}