{"ast":null,"code":"var _jsxFileName = \"/home/dan/Documents/projectv2/front/src/components/GroupList.jsx\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useEffect } from 'react';\nimport Cookies from 'universal-cookie';\nimport { useChatContext, ChannelList } from 'stream-chat-react';\nimport icon1 from '../Stuff/icon1.png';\nimport icon2 from '../Stuff/icon2.png';\nimport icon3 from '../Stuff/icon3.png';\nimport GroupFinder from './GroupFinder';\nimport Groups from './Groups';\nimport PreList from './PreList';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst cookies = new Cookies(); //channel-list__container\n\nvar listStyle = {\n  display: \"flex\",\n  height: \"100%\"\n};\nvar ListHeaderStyle = {\n  color: 'red',\n  padding: \"0 20px\",\n  display: \"flex\",\n  justifyContent: \"space-between\",\n  alignItems: \"center\"\n}; //We can use inline styles by creating a json of styles and setting style attribute to them inline\n\nvar titleStyle = {\n  fontFamily: \"sans-serif\",\n  fontStyle: \"normal\",\n  fontWeight: \"bold\",\n  fontSize: \"18px\",\n  lineHeight: \"28px\"\n};\n\nfunction ListHeader() {\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    style: ListHeaderStyle,\n    children: /*#__PURE__*/_jsxDEV(\"p\", {\n      style: titleStyle,\n      children: \"Groups:\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 40,\n      columnNumber: 9\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 39,\n    columnNumber: 5\n  }, this);\n}\n\n_c = ListHeader;\n\nfunction IconsHolder({\n  logout,\n  opts\n}) {\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"icon_side_container\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"icon1\",\n      children: /*#__PURE__*/_jsxDEV(\"img\", {\n        className: \"iconimg1\",\n        src: icon1,\n        alt: \"appIcon\",\n        width: \"30\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 50,\n        columnNumber: 13\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 49,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"icon2\",\n      onClick: opts,\n      children: /*#__PURE__*/_jsxDEV(\"img\", {\n        className: \"options\",\n        src: icon3,\n        alt: \"OptionsIcon\",\n        width: \"30\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 53,\n        columnNumber: 13\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 52,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"icon2\",\n      onClick: logout,\n      children: /*#__PURE__*/_jsxDEV(\"img\", {\n        className: \"iconimg2\",\n        src: icon2,\n        alt: \"LogoutIcon\",\n        width: \"30\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 56,\n        columnNumber: 13\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 55,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 48,\n    columnNumber: 5\n  }, this);\n}\n\n_c2 = IconsHolder;\n\nfunction channelFilter(channels) {\n  return channels.filter(channel => channel.type === 'team'); // Return channels where the type is team\n}\n\nfunction messageFilter(channels) {\n  return channels.filter(channel => channel.type === 'messaging'); // Return channels where the type is team\n} //We have our icon bar that we render, we then place the group container header and holder. We use the stream API\n// ChannelList component to display channels, but we create our own group list component of which we pass to the \n// api's channel component as a function of the listProp prop\n// Preview and Group list are optional, if not provided, stream chat provides its own channel list\n// First preview shows groups, the second shows direct messaging\n\n\nfunction GroupListContent({\n  setNewChannel,\n  setCreateType,\n  newChannel,\n  setOpenOptions,\n  openOptions\n}) {\n  function opts() {\n    setOpenOptions(!openOptions);\n  }\n\n  function logout() {\n    cookies.remove('token');\n    cookies.remove('username');\n    cookies.remove('fullname');\n    cookies.remove('userId');\n    cookies.remove('hashedPassword');\n    window.location.reload();\n  }\n\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(IconsHolder, {\n      logout: logout,\n      opts: opts\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 95,\n      columnNumber: 12\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"group-list-wrapper\",\n      children: [/*#__PURE__*/_jsxDEV(ListHeader, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 97,\n        columnNumber: 16\n      }, this), /*#__PURE__*/_jsxDEV(GroupFinder, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 98,\n        columnNumber: 16\n      }, this), /*#__PURE__*/_jsxDEV(ChannelList, {\n        filters: () => {},\n        GroupList: true,\n        channelRenderFilterFn: channelFilter,\n        List: listProps => /*#__PURE__*/_jsxDEV(Groups, { ...listProps,\n          type: \"team\",\n          setNewChannel: setNewChannel,\n          setCreateType: setCreateType,\n          newChannel: newChannel,\n          setOpenOptions: setOpenOptions\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 103,\n          columnNumber: 25\n        }, this),\n        Preview: previewProps => /*#__PURE__*/_jsxDEV(PreList, { ...previewProps,\n          type: \"team\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 113,\n          columnNumber: 25\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 99,\n        columnNumber: 16\n      }, this), /*#__PURE__*/_jsxDEV(ChannelList, {\n        filters: () => {},\n        channelRenderFilterFn: messageFilter,\n        List: listProps => /*#__PURE__*/_jsxDEV(Groups, { ...listProps,\n          type: \"messaging\",\n          setNewChannel: setNewChannel,\n          setCreateType: setCreateType,\n          newChannel: newChannel,\n          setOpenOptions: setOpenOptions\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 123,\n          columnNumber: 25\n        }, this),\n        Preview: previewProps => /*#__PURE__*/_jsxDEV(PreList, { ...previewProps,\n          type: \"messaging\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 133,\n          columnNumber: 25\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 119,\n        columnNumber: 16\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 96,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true);\n}\n\n_c3 = GroupListContent;\n\nfunction GroupList({\n  setNewChannel,\n  setCreateType,\n  newChannel,\n  setOpenOptions,\n  openOptions\n}) {\n  _s();\n\n  const [toggleContainer, setToggleContainer] = useState(false);\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      style: listStyle,\n      children: /*#__PURE__*/_jsxDEV(GroupListContent, {\n        setNewChannel: setNewChannel,\n        setCreateType: setCreateType,\n        newChannel: newChannel,\n        setOpenOptions: setOpenOptions,\n        openOptions: openOptions\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 149,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 148,\n      columnNumber: 13\n    }, this)\n  }, void 0, false);\n}\n\n_s(GroupList, \"BdWfyb8H4S3C1ROoeaCqNAELSdA=\");\n\n_c4 = GroupList;\nexport default GroupList;\n\nvar _c, _c2, _c3, _c4;\n\n$RefreshReg$(_c, \"ListHeader\");\n$RefreshReg$(_c2, \"IconsHolder\");\n$RefreshReg$(_c3, \"GroupListContent\");\n$RefreshReg$(_c4, \"GroupList\");","map":{"version":3,"sources":["/home/dan/Documents/projectv2/front/src/components/GroupList.jsx"],"names":["React","useState","useEffect","Cookies","useChatContext","ChannelList","icon1","icon2","icon3","GroupFinder","Groups","PreList","cookies","listStyle","display","height","ListHeaderStyle","color","padding","justifyContent","alignItems","titleStyle","fontFamily","fontStyle","fontWeight","fontSize","lineHeight","ListHeader","IconsHolder","logout","opts","channelFilter","channels","filter","channel","type","messageFilter","GroupListContent","setNewChannel","setCreateType","newChannel","setOpenOptions","openOptions","remove","window","location","reload","listProps","previewProps","GroupList","toggleContainer","setToggleContainer"],"mappings":"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","sourcesContent":["import React, { useState, useEffect} from 'react'\nimport Cookies from 'universal-cookie';\nimport { useChatContext, ChannelList } from 'stream-chat-react'\nimport icon1 from '../Stuff/icon1.png'\nimport icon2 from '../Stuff/icon2.png'\nimport icon3 from '../Stuff/icon3.png'\n\nimport GroupFinder from './GroupFinder';\nimport Groups from './Groups';\nimport PreList from './PreList';\nconst cookies = new Cookies();\n\n\n//channel-list__container\nvar listStyle = {\n    display: \"flex\",\n    height: \"100%\"\n}\n\nvar ListHeaderStyle = {\n    color: 'red',\n    padding: \"0 20px\",\n    display: \"flex\",\n    justifyContent: \"space-between\",\n    alignItems: \"center\"\n\n  };\n//We can use inline styles by creating a json of styles and setting style attribute to them inline\nvar titleStyle = {\n    fontFamily: \"sans-serif\",\n    fontStyle: \"normal\",\n    fontWeight: \"bold\",\n    fontSize: \"18px\",\n    lineHeight: \"28px\",\n}\n\nfunction ListHeader(){ \n    return (\n    <div style={ListHeaderStyle}>\n        <p style={titleStyle} >Groups:</p>\n\n    </div>\n    )\n}\n\nfunction IconsHolder({logout, opts}) {\n    return (\n    <div className=\"icon_side_container\">\n        <div className=\"icon1\">\n            <img className ='iconimg1' src={icon1} alt=\"appIcon\" width=\"30\"/>\n        </div>\n        <div className=\"icon2\" onClick={opts}>\n            <img className='options' src={icon3} alt=\"OptionsIcon\" width=\"30\"/>\n        </div>\n        <div className=\"icon2\" onClick={logout}>\n            <img className='iconimg2' src={icon2} alt=\"LogoutIcon\" width=\"30\"/>\n        </div>\n    </div>\n    )\n}\n\nfunction channelFilter(channels){\n    return channels.filter((channel) => channel.type === 'team' ) // Return channels where the type is team\n}\n\nfunction messageFilter(channels){\n    return channels.filter((channel) => channel.type === 'messaging' ) // Return channels where the type is team\n}\n\n//We have our icon bar that we render, we then place the group container header and holder. We use the stream API\n// ChannelList component to display channels, but we create our own group list component of which we pass to the \n// api's channel component as a function of the listProp prop\n// Preview and Group list are optional, if not provided, stream chat provides its own channel list\n// First preview shows groups, the second shows direct messaging\nfunction GroupListContent({setNewChannel, setCreateType, newChannel, setOpenOptions, openOptions }){\n\n    \n    function opts() {\n        setOpenOptions(!openOptions)\n    }\n\n    function logout(){\n        cookies.remove('token');\n        cookies.remove('username');\n        cookies.remove('fullname');\n        cookies.remove('userId');\n        cookies.remove('hashedPassword');\n        window.location.reload();\n    }\n\n\n\n    return (\n        <>\n           <IconsHolder logout={logout} opts={opts} />\n            <div className =\"group-list-wrapper\"> \n               <ListHeader />\n               <GroupFinder /> \n               <ChannelList\n                    filters={()=>{}}\n                    GroupList   channelRenderFilterFn={channelFilter}\n                    List={(listProps) => (\n                        <Groups \n                            {...listProps}\n                            type=\"team\"\n                            setNewChannel={setNewChannel}\n                            setCreateType={setCreateType} \n                            newChannel={newChannel}\n                            setOpenOptions={setOpenOptions}\n                        />\n                    )}\n                    Preview={(previewProps) => (\n                        <PreList\n                            {... previewProps}\n                            type=\"team\"\n                        />\n                    )}\n               />\n               <ChannelList\n                    filters={()=>{}}\n                    channelRenderFilterFn={messageFilter}\n                    List={(listProps) => (\n                        <Groups \n                            {...listProps}\n                            type=\"messaging\"\n                            setNewChannel={setNewChannel}\n                            setCreateType={setCreateType} \n                            newChannel={newChannel}\n                            setOpenOptions={setOpenOptions}\n                        />\n                    )}\n                    Preview={(previewProps) => (\n                        <PreList\n                            {... previewProps}\n                            type=\"messaging\"\n                        />\n                    )}\n               />\n            </div>\n        </>\n    )\n}\n\nfunction GroupList({setNewChannel, setCreateType, newChannel, setOpenOptions, openOptions }){\n    const[toggleContainer, setToggleContainer] = useState(false)\n    return(\n        <>\n            <div style={listStyle}>\n                <GroupListContent\n                    setNewChannel={setNewChannel} \n                    setCreateType={setCreateType} \n                    newChannel={newChannel} \n                    setOpenOptions={setOpenOptions}\n                    openOptions={openOptions}\n                />\n            </div>\n        </>\n    )\n\n}\n\nexport default GroupList\n"]},"metadata":{},"sourceType":"module"}