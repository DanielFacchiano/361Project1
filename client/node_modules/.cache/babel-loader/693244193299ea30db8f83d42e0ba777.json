{"ast":null,"code":"var _jsxFileName = \"/home/dan/Documents/Untitled Folder/361Project1-master/client/src/components/CreateChannel.jsx\",\n    _s = $RefreshSig$();\n\nimport React from 'react';\nimport { useState } from 'react';\nimport { useChatContext } from 'stream-chat-react';\nimport { CloseCreate } from '../Stuff/CloseCreate';\nimport UserList from './UserList'; // Style for main wrapper\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar createContainer = {\n  display: \"flex\",\n  flexDirection: \"column\",\n  height: \"100%\"\n}; // style for the title input div\n\nvar titleWrapperContainer = {\n  display: \"flex\",\n  flexDirection: \"column\",\n  height: \"160px\",\n  paddingLeft: \"25px\"\n}; // style for page title text\n\nvar createHeader = {\n  fontFamily: \"sans-serif\",\n  fontWeight: \"bold\",\n  fontSize: \"18px\",\n  marginLeft: \"20px\"\n}; // Style for the container of the create channel button\n\nvar buttonWrapper = {\n  height: \"82px\",\n  display: \"flex\",\n  alignItems: \"center\",\n  justifyContent: \"flex-end\",\n  padding: \"0px 10px\"\n}; // Style for the button text\n\nvar buttonStyle = {\n  background: \"salmon\",\n  fontFamily: \"sans-serif\",\n  fontWeight: \"bold\",\n  fontSize: \"18px\",\n  padding: \"10px 20px\",\n  color: \"white\",\n  borderRadius: \"8px\",\n  cursor: \"pointer\"\n}; // function to set channel name inpput field\n\nfunction NameField({\n  groupName = '',\n  setGroupName\n}) {\n  // function using event to detect changes in input, updates inpute state\n  function detectChange(e) {\n    console.log(e); //Prevent page reset\n\n    e.preventDefault(); // set the groups name state to the target value of event passed\n\n    setGroupName(e.target.value);\n  } // return the component that allows setting title input, it changes the name state when typing is detected\n\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    style: titleWrapperContainer,\n    children: [/*#__PURE__*/_jsxDEV(\"p\", {\n      children: \"Group Name\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 59,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n      value: groupName,\n      placeholder: \"Group-Name (No blanks allowed!)\",\n      onChange: detectChange\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 60,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n      children: \"Add Users to Group\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 64,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 58,\n    columnNumber: 9\n  }, this);\n} // Component to facilitate channel creation\n\n\n_c = NameField;\n\nfunction CreateChannel({\n  createType,\n  setNewChannel\n}) {\n  _s();\n\n  // State for name of the selected channel default is left blank by default\n  const [groupName, setGroupName] = useState(''); // Retrieve client and set Active channel from chat context via derefrencing\n\n  const {\n    client,\n    setActiveChannel\n  } = useChatContext(); // State for users to add to group. Includes current user by default\n\n  const [checkedUsers, setCheckedUsers] = useState([client.userID]); //submit function to stream chat for channel creation.\n\n  async function SubmitChannel(e) {\n    //We must prevent page reset\n    e.preventDefault();\n\n    try {\n      // Create new group with these fields\n      var newGroup = await client.channel(createType, groupName, {\n        name: groupName,\n        members: checkedUsers\n      }); // loads initial channel state, watches for changes\n\n      await newGroup.watch(); // reset states\n\n      setCheckedUsers([client.userID]);\n      setGroupName('');\n      setNewChannel(false); // Set the active channel, to the channel we just created\n\n      setActiveChannel(newGroup);\n    } catch (e) {\n      console.log();\n    }\n  } // Layout of components for create channel page. We render the correct title, the correct buttons\n  // We render the input if not DM, we render our userlist component with the function to set\n  // an array of users corresponding to checks(inside UserList) FInally we have a submit button\n  // to create the new channel\n\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    style: createContainer,\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      style: createHeader,\n      children: [/*#__PURE__*/_jsxDEV(\"p\", {\n        children: createType === 'team' ? 'Create a new Group' : 'Send a user messages'\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 108,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(CloseCreate, {\n        setNewChannel: setNewChannel\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 112,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 107,\n      columnNumber: 13\n    }, this), createType === 'team' && /*#__PURE__*/_jsxDEV(NameField, {\n      groupName: groupName,\n      setGroupName: setGroupName\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 116,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(UserList, {\n      setCheckedUsers: setCheckedUsers\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 118,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      style: buttonWrapper,\n      onClick: SubmitChannel,\n      children: /*#__PURE__*/_jsxDEV(\"p\", {\n        style: buttonStyle,\n        children: \"Submit\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 121,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 120,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 106,\n    columnNumber: 9\n  }, this);\n}\n\n_s(CreateChannel, \"CV7DwrkCJy0YgbWYD4BW5kuJk98=\", false, function () {\n  return [useChatContext];\n});\n\n_c2 = CreateChannel;\nexport default CreateChannel;\n\nvar _c, _c2;\n\n$RefreshReg$(_c, \"NameField\");\n$RefreshReg$(_c2, \"CreateChannel\");","map":{"version":3,"sources":["/home/dan/Documents/Untitled Folder/361Project1-master/client/src/components/CreateChannel.jsx"],"names":["React","useState","useChatContext","CloseCreate","UserList","createContainer","display","flexDirection","height","titleWrapperContainer","paddingLeft","createHeader","fontFamily","fontWeight","fontSize","marginLeft","buttonWrapper","alignItems","justifyContent","padding","buttonStyle","background","color","borderRadius","cursor","NameField","groupName","setGroupName","detectChange","e","console","log","preventDefault","target","value","CreateChannel","createType","setNewChannel","client","setActiveChannel","checkedUsers","setCheckedUsers","userID","SubmitChannel","newGroup","channel","name","members","watch"],"mappings":"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","sourcesContent":["import React from 'react';\nimport{useState} from 'react';\nimport {useChatContext} from 'stream-chat-react'\nimport {CloseCreate} from '../Stuff/CloseCreate'\nimport UserList from './UserList';\n\n// Style for main wrapper\nvar createContainer = {\n    display: \"flex\",\n    flexDirection: \"column\",\n    height: \"100%\"\n}\n// style for the title input div\nvar titleWrapperContainer= {\n    display: \"flex\",\n    flexDirection: \"column\",\n    height: \"160px\",\n    paddingLeft: \"25px\"\n}\n// style for page title text\nvar createHeader= {\n    fontFamily: \"sans-serif\",\n    fontWeight: \"bold\",\n    fontSize: \"18px\",\n    marginLeft: \"20px\"\n}\n// Style for the container of the create channel button\nvar buttonWrapper={\n    height: \"82px\",\n    display: \"flex\",\n    alignItems: \"center\",\n    justifyContent: \"flex-end\",\n    padding: \"0px 10px\"\n}\n// Style for the button text\nvar buttonStyle={\n    background:\"salmon\",\n    fontFamily: \"sans-serif\",\n    fontWeight: \"bold\",\n    fontSize: \"18px\",\n    padding: \"10px 20px\",\n    color: \"white\",\n    borderRadius: \"8px\",\n    cursor: \"pointer\"\n}\n// function to set channel name inpput field\nfunction NameField({groupName = '', setGroupName}){\n// function using event to detect changes in input, updates inpute state\n    function detectChange(e){\n        console.log(e)\n        //Prevent page reset\n        e.preventDefault()\n        // set the groups name state to the target value of event passed\n        setGroupName(e.target.value)\n    }\n// return the component that allows setting title input, it changes the name state when typing is detected\n    return(\n        <div style={titleWrapperContainer}>\n            <p>Group Name</p>\n            <input value={groupName} \n            placeholder=\"Group-Name (No blanks allowed!)\" \n            onChange={detectChange} \n            />\n            <p>Add Users to Group</p>\n        </div>\n    )\n}\n\n\n// Component to facilitate channel creation\nfunction CreateChannel({createType, setNewChannel}){\n    // State for name of the selected channel default is left blank by default\n    const [groupName, setGroupName] = useState('')\n    // Retrieve client and set Active channel from chat context via derefrencing\n    const {client, setActiveChannel} = useChatContext();\n    // State for users to add to group. Includes current user by default\n    const [checkedUsers, setCheckedUsers] = useState([client.userID])\n    //submit function to stream chat for channel creation.\n    async function SubmitChannel (e){\n        //We must prevent page reset\n        e.preventDefault()\n\n        try {\n            // Create new group with these fields\n            var newGroup = await client.channel(createType, groupName, {\n                name: groupName, members: checkedUsers\n            })\n            // loads initial channel state, watches for changes\n            await newGroup.watch();\n            // reset states\n            setCheckedUsers([client.userID])\n            setGroupName('')\n            setNewChannel(false)\n            // Set the active channel, to the channel we just created\n            setActiveChannel(newGroup)\n        } \n        catch(e){\n            console.log()\n        }\n    }\n    // Layout of components for create channel page. We render the correct title, the correct buttons\n    // We render the input if not DM, we render our userlist component with the function to set\n    // an array of users corresponding to checks(inside UserList) FInally we have a submit button\n    // to create the new channel\n    return (\n        <div style={createContainer}>\n            <div style={createHeader}>\n                <p>\n                    {createType === 'team' ? 'Create a new Group' : 'Send a user messages'}\n                </p>\n                {/* We want to pass the close creation button the functioon to change create state */}\n                <CloseCreate setNewChannel={setNewChannel}/>\n            </div>\n            {/* There is no input for direct messages, so we detect such and render or do not the Name Field */}\n            {createType === 'team' && \n            <NameField groupName={groupName} \n            setGroupName={setGroupName}/>}\n            <UserList setCheckedUsers={setCheckedUsers}  />\n                {/* Submit button wrapper, onclick is submission of a new channel (create and render group w fields) */}\n            <div style={buttonWrapper} onClick={SubmitChannel}>\n                <p style={buttonStyle}>\n                    Submit\n                </p>\n            </div>\n        </div>\n    )\n}\n\nexport default CreateChannel\n"]},"metadata":{},"sourceType":"module"}