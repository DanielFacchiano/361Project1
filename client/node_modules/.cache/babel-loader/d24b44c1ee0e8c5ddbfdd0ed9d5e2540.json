{"ast":null,"code":"var _jsxFileName = \"/home/dan/Documents/Untitled Folder/361Project1-master/client/src/components/Groups.jsx\";\nimport React from 'react';\nimport { AddChannel } from '../Stuff/AddChannel'; //We pass the props from the api here, as well as type and state functions\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction Groups({\n  children,\n  error = false,\n  loading,\n  type,\n  setNewChannel,\n  setCreateType,\n  newChannel,\n  openOptions,\n  setOpenOptions\n}) {\n  //If we get an error from the API channelList, we display the following\n  if (error) {\n    if (type === 'team') {\n      return /*#__PURE__*/_jsxDEV(\"div\", {\n        children: \"Connection Error! Try again later\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 11,\n        columnNumber: 13\n      }, this);\n    } else {\n      return;\n    }\n  } //If we our currently loading from the Api we let the user know as much\n\n\n  if (loading) {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: \"loading, please wait...\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 22,\n      columnNumber: 13\n    }, this);\n  } // We return the correct title and add button for the channel list we are generating with this component\n  // We add the tooltip code as well. We pass the correct props to the new channel button we embed into the header\n  // finally, we render the preview components that go with this list.\n\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"p\", {\n        children: type == 'team' ? 'Channels' : 'Direct Messages'\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 33,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: `addButtonHolder_${type === 'team' ? 'Channels' : 'DirectMessages'}`,\n        children: [/*#__PURE__*/_jsxDEV(\"span\", {\n          className: `addToolTip_${type === 'team' ? 'Channels' : 'DirectMessages'}`,\n          children: \" Click here to create a group with members \"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 37,\n          columnNumber: 17\n        }, this), /*#__PURE__*/_jsxDEV(AddChannel, {\n          type: type == \"team\" ? \"team\" : \"messaging\",\n          setNewChannel: setNewChannel,\n          newChannel: newChannel,\n          setOpenOptions: setOpenOptions,\n          openOptions: openOptions,\n          setCreateType: setCreateType\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 41,\n          columnNumber: 17\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 36,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 32,\n      columnNumber: 13\n    }, this), children]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 31,\n    columnNumber: 9\n  }, this);\n}\n\n_c = Groups;\nexport default Groups;\n\nvar _c;\n\n$RefreshReg$(_c, \"Groups\");","map":{"version":3,"sources":["/home/dan/Documents/Untitled Folder/361Project1-master/client/src/components/Groups.jsx"],"names":["React","AddChannel","Groups","children","error","loading","type","setNewChannel","setCreateType","newChannel","openOptions","setOpenOptions"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAAQC,UAAR,QAAyB,qBAAzB,C,CAGA;;;;AACA,SAASC,MAAT,CAAiB;AAACC,EAAAA,QAAD;AAAWC,EAAAA,KAAK,GAAG,KAAnB;AAA0BC,EAAAA,OAA1B;AAAmCC,EAAAA,IAAnC;AAAyCC,EAAAA,aAAzC;AAAwDC,EAAAA,aAAxD;AAAuEC,EAAAA,UAAvE;AAAmFC,EAAAA,WAAnF;AAAgGC,EAAAA;AAAhG,CAAjB,EAAkI;AAC9H;AACA,MAAGP,KAAH,EAAU;AACN,QAAIE,IAAI,KAAK,MAAb,EAAoB;AAChB,0BACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cADA;AAIH,KALD,MAMI;AACA;AACH;AACJ,GAZ6H,CAa9H;;;AACA,MAAGD,OAAH,EAAW;AACP,wBACI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YADJ;AAKH,GApB6H,CAqB9H;AACA;AACA;;;AACA,sBACI;AAAA,4BACI;AAAA,8BACI;AAAA,kBACKC,IAAI,IAAI,MAAR,GAAiB,UAAjB,GAA8B;AADnC;AAAA;AAAA;AAAA;AAAA,cADJ,eAII;AAAM,QAAA,SAAS,EAAG,mBAAkBA,IAAI,KAAK,MAAT,GAAkB,UAAlB,GAA+B,gBAAiB,EAApF;AAAA,gCACA;AAAM,UAAA,SAAS,EAAG,cAAaA,IAAI,KAAK,MAAT,GAAkB,UAAlB,GAA+B,gBAAiB,EAA/E;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gBADA,eAKA,QAAC,UAAD;AACI,UAAA,IAAI,EACIA,IAAI,IAAI,MAAR,GAAiB,MAAjB,GAA0B,WAFtC;AAII,UAAA,aAAa,EAAEC,aAJnB;AAKI,UAAA,UAAU,EAAEE,UALhB;AAMI,UAAA,cAAc,EAAEE,cANpB;AAOI,UAAA,WAAW,EAAED,WAPjB;AAQI,UAAA,aAAa,EAAEF;AARnB;AAAA;AAAA;AAAA;AAAA,gBALA;AAAA;AAAA;AAAA;AAAA;AAAA,cAJJ;AAAA;AAAA;AAAA;AAAA;AAAA,YADJ,EAuBKL,QAvBL;AAAA;AAAA;AAAA;AAAA;AAAA,UADJ;AA2BH;;KAnDQD,M;AAqDT,eAAeA,MAAf","sourcesContent":["import React from 'react'\nimport {AddChannel} from '../Stuff/AddChannel'\n\n\n//We pass the props from the api here, as well as type and state functions\nfunction Groups ({children, error = false, loading, type, setNewChannel, setCreateType, newChannel, openOptions, setOpenOptions}) {\n    //If we get an error from the API channelList, we display the following\n    if(error) {\n        if (type === 'team'){\n            return (\n            <div>\n                    Connection Error! Try again later\n            </div>)\n        }\n        else{\n            return \n        }\n    }\n    //If we our currently loading from the Api we let the user know as much\n    if(loading){\n        return (\n            <div>\n                    loading, please wait...\n            </div>\n        )\n    }\n    // We return the correct title and add button for the channel list we are generating with this component\n    // We add the tooltip code as well. We pass the correct props to the new channel button we embed into the header\n    // finally, we render the preview components that go with this list.\n    return (\n        <div>\n            <div>\n                <p>\n                    {type == 'team' ? 'Channels' : 'Direct Messages'}\n                </p>\n                <div  className={`addButtonHolder_${type === 'team' ? 'Channels' : 'DirectMessages'}`}> \n                <span className={`addToolTip_${type === 'team' ? 'Channels' : 'DirectMessages'}`}> Click here to create a group with members </span>\n               \n                {/* Svg to add channel, takes options functions and manipulates them based on attributes (onlclick) works for both\n                dms and channels. This is accomplished by setting type based upon type passed to groups component*/}\n                <AddChannel\n                    type ={\n                            type == \"team\" ? \"team\" : \"messaging\"\n                        }\n                    setNewChannel={setNewChannel}\n                    newChannel={newChannel}\n                    setOpenOptions={setOpenOptions}\n                    openOptions={openOptions}\n                    setCreateType={setCreateType} \n                />\n                </div>\n            </div>\n            {/* Renders the actual channels in our groups component, the components come from stream chat*/}\n            {children}\n        </div>\n    )\n}\n\nexport default Groups\n"]},"metadata":{},"sourceType":"module"}