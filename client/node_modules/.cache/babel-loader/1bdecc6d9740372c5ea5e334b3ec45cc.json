{"ast":null,"code":"var _jsxFileName = \"/home/dan/Documents/Untitled Folder/361Project1-master/client/src/components/TeamMessage.jsx\",\n    _s = $RefreshSig$();\n\nimport React, { useState } from 'react';\nimport { useMessageContext, useChatContext } from 'stream-chat-react'; // Url to teamates image scraping service\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst urlStr = 'https://scrape.quin.fish/'; //message component\n\nfunction TeamMessage(Message, i) {\n  _s();\n\n  //retrieve the message we are building a component for\n  const {\n    handleOpenThread,\n    message\n  } = useMessageContext(); //We need that chat client, to check if the message we are examining is from our own user, if so different style\n\n  const {\n    client\n  } = useChatContext();\n  const [imageUrl, setImageUrl] = useState('1111'); //set image state to new url\n\n  const setImg = newUrl => {\n    setImageUrl(newUrl);\n  }; //rudimentary url detection because im lazy and getting pretty tired of this nonsense\n\n\n  var lastFive = message.text.substr(message.text.length - 4);\n  var firstFive = message.text.substr(0, 4);\n  var isUrl = false;\n\n  if ((lastFive == \".com\" || lastFive == \"com/\" || lastFive == \"edu/\") && firstFive == \"http\") {\n    isUrl = true;\n  } // holds the url we are going to detect and feed to Hao's microservice\n\n\n  var imgUrl = \"\";\n  console.log(message.user.name); //if it is a url, we will make a request to my teamates service\n\n  if (isUrl) {\n    console.log(\"hello\");\n    var req = new XMLHttpRequest();\n    var payload = {\n      url: null\n    };\n    payload.url = message.text;\n    req.open('POST', urlStr, true);\n    req.setRequestHeader('Content-Type', 'application/json');\n    req.addEventListener('load', function () {\n      if (req.status >= 200 && req.status < 400) {\n        //we get a response image, we build the image link with the response image\n        var response = JSON.parse(req.responseText); //Creates array of rows, super helpful for front end\n\n        console.log(response.data.images[0]); // log to console what we got back\n\n        imgUrl = response.data.images[0];\n        setImg(imgUrl);\n      } else {\n        console.log(\"Error (did you put blank input?)\" + req.statusText);\n      }\n    });\n    req.send(JSON.stringify(payload));\n  } //build message component, with username and message container\n\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: `message_container_${client.userID == message.user.id ? \"user\" : \"other\"}`,\n    children: [/*#__PURE__*/_jsxDEV(\"p\", {\n      className: `message_${client.userID == message.user.id ? \"user\" : \"other\"}`,\n      children: [message.user.name, \":\"]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 55,\n      columnNumber: 13\n    }, this), message.text, isUrl ? /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"a\", {\n        href: message.text,\n        children: [\"  \", /*#__PURE__*/_jsxDEV(\"img\", {\n          src: imageUrl,\n          width: \"150\",\n          height: \"100\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 60,\n          columnNumber: 52\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 60,\n        columnNumber: 27\n      }, this), \" \"]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 60,\n      columnNumber: 22\n    }, this) : '']\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 54,\n    columnNumber: 9\n  }, this);\n}\n\n_s(TeamMessage, \"XxrrH30yz1Nznsvf/Vkc9LRYPKE=\", false, function () {\n  return [useMessageContext, useChatContext];\n});\n\n_c = TeamMessage;\nexport default TeamMessage;\n\nvar _c;\n\n$RefreshReg$(_c, \"TeamMessage\");","map":{"version":3,"sources":["/home/dan/Documents/Untitled Folder/361Project1-master/client/src/components/TeamMessage.jsx"],"names":["React","useState","useMessageContext","useChatContext","urlStr","TeamMessage","Message","i","handleOpenThread","message","client","imageUrl","setImageUrl","setImg","newUrl","lastFive","text","substr","length","firstFive","isUrl","imgUrl","console","log","user","name","req","XMLHttpRequest","payload","url","open","setRequestHeader","addEventListener","status","response","JSON","parse","responseText","data","images","statusText","send","stringify","userID","id"],"mappings":";;;AAAA,OAAOA,KAAP,IAAgBC,QAAhB,QAAgC,OAAhC;AACA,SAASC,iBAAT,EAA4BC,cAA5B,QAAkD,mBAAlD,C,CACA;;;AACA,MAAMC,MAAM,GAAG,2BAAf,C,CAEA;;AACA,SAASC,WAAT,CAAqBC,OAArB,EAA8BC,CAA9B,EAAgC;AAAA;;AAC5B;AACA,QAAM;AAAEC,IAAAA,gBAAF;AAAoBC,IAAAA;AAApB,MAAgCP,iBAAiB,EAAvD,CAF4B,CAG5B;;AACA,QAAM;AAACQ,IAAAA;AAAD,MAAWP,cAAc,EAA/B;AACA,QAAM,CAACQ,QAAD,EAAWC,WAAX,IAA0BX,QAAQ,CAAC,MAAD,CAAxC,CAL4B,CAM7B;;AACC,QAAMY,MAAM,GAAIC,MAAD,IAAY;AACvBF,IAAAA,WAAW,CAACE,MAAD,CAAX;AACD,GAFH,CAP4B,CAW5B;;;AACA,MAAIC,QAAQ,GAAGN,OAAO,CAACO,IAAR,CAAaC,MAAb,CAAoBR,OAAO,CAACO,IAAR,CAAaE,MAAb,GAAsB,CAA1C,CAAf;AACA,MAAIC,SAAS,GAAGV,OAAO,CAACO,IAAR,CAAaC,MAAb,CAAoB,CAApB,EAAuB,CAAvB,CAAhB;AACA,MAAIG,KAAK,GAAG,KAAZ;;AACA,MAAG,CAACL,QAAQ,IAAE,MAAV,IAAmBA,QAAQ,IAAE,MAA7B,IAAuCA,QAAQ,IAAE,MAAlD,KAA6DI,SAAS,IAAI,MAA7E,EAAoF;AAChFC,IAAAA,KAAK,GAAG,IAAR;AACH,GAjB2B,CAkB5B;;;AACA,MAAIC,MAAM,GAAG,EAAb;AACAC,EAAAA,OAAO,CAACC,GAAR,CAAYd,OAAO,CAACe,IAAR,CAAaC,IAAzB,EApB4B,CAsB5B;;AACA,MAAIL,KAAJ,EAAU;AACNE,IAAAA,OAAO,CAACC,GAAR,CAAY,OAAZ;AACN,QAAIG,GAAG,GAAG,IAAIC,cAAJ,EAAV;AACM,QAAIC,OAAO,GAAG;AAACC,MAAAA,GAAG,EAAC;AAAL,KAAd;AACAD,IAAAA,OAAO,CAACC,GAAR,GAAcpB,OAAO,CAACO,IAAtB;AACAU,IAAAA,GAAG,CAACI,IAAJ,CAAS,MAAT,EAAiB1B,MAAjB,EAAyB,IAAzB;AACNsB,IAAAA,GAAG,CAACK,gBAAJ,CAAqB,cAArB,EAAqC,kBAArC;AACAL,IAAAA,GAAG,CAACM,gBAAJ,CAAqB,MAArB,EAA6B,YAAU;AACtC,UAAGN,GAAG,CAACO,MAAJ,IAAa,GAAb,IAAoBP,GAAG,CAACO,MAAJ,GAAa,GAApC,EAAwC;AAC3B;AACZ,YAAIC,QAAQ,GAAGC,IAAI,CAACC,KAAL,CAAWV,GAAG,CAACW,YAAf,CAAf,CAFuC,CAEM;;AAC7Cf,QAAAA,OAAO,CAACC,GAAR,CAAYW,QAAQ,CAACI,IAAT,CAAcC,MAAd,CAAqB,CAArB,CAAZ,EAHuC,CAGF;;AACzBlB,QAAAA,MAAM,GAACa,QAAQ,CAACI,IAAT,CAAcC,MAAd,CAAqB,CAArB,CAAP;AACA1B,QAAAA,MAAM,CAACQ,MAAD,CAAN;AAEZ,OAPD,MAQI;AACHC,QAAAA,OAAO,CAACC,GAAR,CAAY,qCAAmCG,GAAG,CAACc,UAAnD;AACA;AACD,KAZD;AAaMd,IAAAA,GAAG,CAACe,IAAJ,CAASN,IAAI,CAACO,SAAL,CAAed,OAAf,CAAT;AACH,GA5C2B,CA6C5B;;;AACA,sBACI;AAAK,IAAA,SAAS,EAAG,qBAAoBlB,MAAM,CAACiC,MAAP,IAAelC,OAAO,CAACe,IAAR,CAAaoB,EAA5B,GAAiC,MAAjC,GAAyC,OAAQ,EAAtF;AAAA,4BACI;AAAG,MAAA,SAAS,EAAG,WAAUlC,MAAM,CAACiC,MAAP,IAAelC,OAAO,CAACe,IAAR,CAAaoB,EAA5B,GAAiC,MAAjC,GAA0C,OAAQ,EAA3E;AAAA,iBACCnC,OAAO,CAACe,IAAR,CAAaC,IADd;AAAA;AAAA;AAAA;AAAA;AAAA,YADJ,EAIKhB,OAAO,CAACO,IAJb,EAMKI,KAAK,gBAAG;AAAA,8BAAK;AAAG,QAAA,IAAI,EAAEX,OAAO,CAACO,IAAjB;AAAA,sCAAyB;AAAK,UAAA,GAAG,EAAEL,QAAV;AAAoB,UAAA,KAAK,EAAC,KAA1B;AAAgC,UAAA,MAAM,EAAC;AAAvC;AAAA;AAAA;AAAA;AAAA,gBAAzB;AAAA;AAAA;AAAA;AAAA;AAAA,cAAL;AAAA;AAAA;AAAA;AAAA;AAAA,YAAH,GAAkG,EAN5G;AAAA;AAAA;AAAA;AAAA;AAAA,UADJ;AAWH;;GAzDQN,W;UAEiCH,iB,EAErBC,c;;;KAJZE,W;AA2DT,eAAeA,WAAf","sourcesContent":["import React, { useState } from 'react';\nimport { useMessageContext, useChatContext } from 'stream-chat-react';\n// Url to teamates image scraping service\nconst urlStr = 'https://scrape.quin.fish/';\n\n//message component\nfunction TeamMessage(Message, i){\n    //retrieve the message we are building a component for\n    const { handleOpenThread, message } = useMessageContext();\n    //We need that chat client, to check if the message we are examining is from our own user, if so different style\n    const {client} = useChatContext()\n    const [imageUrl, setImageUrl] = useState('1111');\n   //set image state to new url\n    const setImg = (newUrl) => {\n        setImageUrl(newUrl);\n      } \n\n    //rudimentary url detection because im lazy and getting pretty tired of this nonsense\n    var lastFive = message.text.substr(message.text.length - 4);\n    var firstFive = message.text.substr(0, 4);\n    var isUrl = false\n    if((lastFive==\".com\" ||lastFive==\"com/\" || lastFive==\"edu/\") && firstFive == \"http\"){\n        isUrl = true\n    }\n    // holds the url we are going to detect and feed to Hao's microservice\n    var imgUrl = \"\"\n    console.log(message.user.name)\n\n    //if it is a url, we will make a request to my teamates service\n    if (isUrl){\n        console.log(\"hello\")\n\t\tvar req = new XMLHttpRequest();\n        var payload = {url:null};\n        payload.url = message.text\n        req.open('POST', urlStr, true);\n\t\treq.setRequestHeader('Content-Type', 'application/json');\n\t\treq.addEventListener('load', function(){\n\t\t\tif(req.status>= 200 && req.status < 400){\n                //we get a response image, we build the image link with the response image\n\t\t\t\tvar response = JSON.parse(req.responseText);\t//Creates array of rows, super helpful for front end\n\t\t\t\tconsole.log(response.data.images[0]);// log to console what we got back\n                imgUrl=response.data.images[0]\n                setImg(imgUrl)              \n\n\t\t\t}\n\t\t\telse{\n\t\t\t\tconsole.log(\"Error (did you put blank input?)\"+req.statusText);\n\t\t\t}\n\t\t});\n        req.send(JSON.stringify(payload));   \n    }\n    //build message component, with username and message container\n    return (\n        <div className={`message_container_${client.userID==message.user.id ? \"user\" :\"other\"}`}>\n            <p className={`message_${client.userID==message.user.id ? \"user\" : \"other\"}`}>\n            {message.user.name}:\n            </p>\n            {message.text} \n \n            {isUrl ? <div><a href={message.text}>  <img src={imageUrl} width=\"150\" height=\"100\" ></img></a> </div>: ''}\n\n        </div>\n    )\n}\n\nexport default TeamMessage\n"]},"metadata":{},"sourceType":"module"}