{"ast":null,"code":"var _jsxFileName = \"/home/dan/Documents/Untitled Folder/361Project1-master/client/src/App.jsx\",\n    _s = $RefreshSig$();\n\nimport './App.css';\nimport { StreamChat } from 'stream-chat';\nimport Cookies from 'universal-cookie';\nimport { Chat } from 'stream-chat-react'; //The Main wrapper for all the stream api Channel shenanigans we are using\n\nimport { useState } from 'react'; //THis is what styles the components of Stream Chat. If the styles look professional anywhere its this\n\nimport 'stream-chat-react/dist/css/index.css'; //where we import our components into the program\n\nimport ChatPage from './components/ChatPage';\nimport GroupList from './components/GroupList';\nimport Groups from './components/Groups';\nimport SignIn from './components/SignIn'; //Our API key for stream chat, we use the stream chat to get and instance of it to hoist into the chat client\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar streamKey = '7z6fubsdagca'; //cookies instance\n\nconst cookies = new Cookies(); //if were signed in, cookies should gave a authorization token\n\nconst userSignedIn = cookies.get(\"token\"); //get our stream chat instance by passing stream chat our api key\n\nvar instance = StreamChat.getInstance(streamKey); //if we have an auth token, we can our cookie info info to the stream instance to get our users pertinent stuff\n\nif (userSignedIn) {\n  instance.connectUser({\n    token: cookies.get('token'),\n    name: cookies.get('username'),\n    fullName: cookies.get('fullname'),\n    id: cookies.get('userId'),\n    hashedPassword: cookies.get('hashedPassword')\n  }, userSignedIn);\n}\n\nconsole.log(userSignedIn); // The main componenet we put into the html document\n\nfunction App() {\n  _s();\n\n  // If were using a Team messanger or a direct message (for when editing/creating channels)\n  const [createType, setCreateType] = useState(''); // If we set this state to true, we want the chat page to show the create channel page\n\n  const [newChannel, setNewChannel] = useState(false); //  if we set this to true, we want the channel options to open\n\n  const [openOptions, setOpenOptions] = useState(false); // if no users are signed in, we want the sign in component so we can get a users information\n\n  if (userSignedIn == null) {\n    return /*#__PURE__*/_jsxDEV(SignIn, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 48,\n      columnNumber: 36\n    }, this);\n  } //Return the main chat application, with the sidebar grouplist and the main chat page\n  // we pass them the functions needed to change states to open different windows and options\n\n\n  return (\n    /*#__PURE__*/\n    // our main app page consists of two components. The sidebar on the left, and the chat page on the right. These different\n    // components need different usestate props to open and close different menus pertinenet to them\n    //The most powerful wrapper \n    _jsxDEV(\"div\", {\n      className: \"eminmen\",\n      children: /*#__PURE__*/_jsxDEV(Chat, {\n        client: instance,\n        theme: \"team light\",\n        children: [/*#__PURE__*/_jsxDEV(GroupList, {\n          newChannel: newChannel,\n          setCreateType: setCreateType,\n          setNewChannel: setNewChannel,\n          setOpenOptions: setOpenOptions,\n          openOptions: openOptions\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 59,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(ChatPage, {\n          newChannel: newChannel,\n          openOptions: openOptions,\n          setNewChannel: setNewChannel,\n          setOpenOptions: setOpenOptions,\n          createType: createType\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 67,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 58,\n        columnNumber: 7\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 56,\n      columnNumber: 5\n    }, this)\n  );\n}\n\n_s(App, \"76J8zvnWdgSAc2iKjRvB7Clma9c=\");\n\n_c = App;\nexport default App;\n\nvar _c;\n\n$RefreshReg$(_c, \"App\");","map":{"version":3,"sources":["/home/dan/Documents/Untitled Folder/361Project1-master/client/src/App.jsx"],"names":["StreamChat","Cookies","Chat","useState","ChatPage","GroupList","Groups","SignIn","streamKey","cookies","userSignedIn","get","instance","getInstance","connectUser","token","name","fullName","id","hashedPassword","console","log","App","createType","setCreateType","newChannel","setNewChannel","openOptions","setOpenOptions"],"mappings":";;;AAAA,OAAO,WAAP;AACA,SAAQA,UAAR,QAAyB,aAAzB;AACA,OAAOC,OAAP,MAAoB,kBAApB;AACA,SAASC,IAAT,QAAqB,mBAArB,C,CAAyC;;AACzC,SAASC,QAAT,QAAyB,OAAzB,C,CACA;;AACA,OAAO,sCAAP,C,CAGA;;AACA,OAAOC,QAAP,MAAqB,uBAArB;AACA,OAAOC,SAAP,MAAsB,wBAAtB;AACA,OAAOC,MAAP,MAAmB,qBAAnB;AACA,OAAOC,MAAP,MAAmB,qBAAnB,C,CAGA;;;AACA,IAAIC,SAAS,GAAC,cAAd,C,CACA;;AACA,MAAMC,OAAO,GAAG,IAAIR,OAAJ,EAAhB,C,CACA;;AACA,MAAMS,YAAY,GAAGD,OAAO,CAACE,GAAR,CAAY,OAAZ,CAArB,C,CAEA;;AACA,IAAIC,QAAQ,GAAGZ,UAAU,CAACa,WAAX,CAAuBL,SAAvB,CAAf,C,CACA;;AACA,IAAGE,YAAH,EAAiB;AACfE,EAAAA,QAAQ,CAACE,WAAT,CAAqB;AACjBC,IAAAA,KAAK,EAAGN,OAAO,CAACE,GAAR,CAAY,OAAZ,CADS;AAEjBK,IAAAA,IAAI,EAAEP,OAAO,CAACE,GAAR,CAAY,UAAZ,CAFW;AAGjBM,IAAAA,QAAQ,EAAER,OAAO,CAACE,GAAR,CAAY,UAAZ,CAHO;AAIjBO,IAAAA,EAAE,EAAET,OAAO,CAACE,GAAR,CAAY,QAAZ,CAJa;AAKjBQ,IAAAA,cAAc,EAAEV,OAAO,CAACE,GAAR,CAAY,gBAAZ;AALC,GAArB,EAMGD,YANH;AAOD;;AACDU,OAAO,CAACC,GAAR,CAAYX,YAAZ,E,CAEA;;AACA,SAASY,GAAT,GAAe;AAAA;;AACb;AACA,QAAM,CAACC,UAAD,EAAaC,aAAb,IAA8BrB,QAAQ,CAAC,EAAD,CAA5C,CAFa,CAGb;;AACA,QAAM,CAACsB,UAAD,EAAaC,aAAb,IAA8BvB,QAAQ,CAAC,KAAD,CAA5C,CAJa,CAKb;;AACA,QAAM,CAACwB,WAAD,EAAcC,cAAd,IAAgCzB,QAAQ,CAAC,KAAD,CAA9C,CANa,CAQb;;AACA,MAAGO,YAAY,IAAI,IAAnB,EAAwB;AAAE,wBAAO,QAAC,MAAD;AAAA;AAAA;AAAA;AAAA,YAAP;AACzB,GAVY,CAWb;AACA;;;AACA;AAAA;AACE;AACA;AACA;AACA;AAAK,MAAA,SAAS,EAAC,SAAf;AAAA,6BAEE,QAAC,IAAD;AAAM,QAAA,MAAM,EAAIE,QAAhB;AAA0B,QAAA,KAAK,EAAC,YAAhC;AAAA,gCACM,QAAC,SAAD;AACE,UAAA,UAAU,EAAEa,UADd;AAEE,UAAA,aAAa,EAAED,aAFjB;AAGE,UAAA,aAAa,EAAEE,aAHjB;AAIE,UAAA,cAAc,EAAEE,cAJlB;AAKE,UAAA,WAAW,EAAED;AALf;AAAA;AAAA;AAAA;AAAA,gBADN,eASM,QAAC,QAAD;AACE,UAAA,UAAU,EAAEF,UADd;AAEE,UAAA,WAAW,EAAEE,WAFf;AAGE,UAAA,aAAa,EAAED,aAHjB;AAIE,UAAA,cAAc,EAAEE,cAJlB;AAKE,UAAA,UAAU,EAAEL;AALd;AAAA;AAAA;AAAA;AAAA,gBATN;AAAA;AAAA;AAAA;AAAA;AAAA;AAFF;AAAA;AAAA;AAAA;AAAA;AAJF;AA0BD;;GAvCQD,G;;KAAAA,G;AAyCT,eAAeA,GAAf","sourcesContent":["import './App.css';\nimport {StreamChat} from 'stream-chat'\nimport Cookies from 'universal-cookie'\nimport { Chat } from 'stream-chat-react' //The Main wrapper for all the stream api Channel shenanigans we are using\nimport { useState } from 'react';\n//THis is what styles the components of Stream Chat. If the styles look professional anywhere its this\nimport 'stream-chat-react/dist/css/index.css'\n\n\n//where we import our components into the program\nimport ChatPage from './components/ChatPage' \nimport GroupList from './components/GroupList'\nimport Groups from './components/Groups';\nimport SignIn from './components/SignIn';\n\n\n//Our API key for stream chat, we use the stream chat to get and instance of it to hoist into the chat client\nvar streamKey='7z6fubsdagca'\n//cookies instance\nconst cookies = new Cookies();\n//if were signed in, cookies should gave a authorization token\nconst userSignedIn = cookies.get(\"token\");\n\n//get our stream chat instance by passing stream chat our api key\nvar instance = StreamChat.getInstance(streamKey)\n//if we have an auth token, we can our cookie info info to the stream instance to get our users pertinent stuff\nif(userSignedIn) {\n  instance.connectUser({\n      token : cookies.get('token'),\n      name: cookies.get('username'),\n      fullName: cookies.get('fullname'),\n      id: cookies.get('userId'),\n      hashedPassword: cookies.get('hashedPassword')\n  }, userSignedIn)\n}\nconsole.log(userSignedIn)\n\n// The main componenet we put into the html document\nfunction App() {\n  // If were using a Team messanger or a direct message (for when editing/creating channels)\n  const [createType, setCreateType] = useState('')\n  // If we set this state to true, we want the chat page to show the create channel page\n  const [newChannel, setNewChannel] = useState(false)\n  //  if we set this to true, we want the channel options to open\n  const [openOptions, setOpenOptions] = useState(false)\n\n  // if no users are signed in, we want the sign in component so we can get a users information\n  if(userSignedIn == null){ return <SignIn /> \n  }\n  //Return the main chat application, with the sidebar grouplist and the main chat page\n  // we pass them the functions needed to change states to open different windows and options\n  return (\n    // our main app page consists of two components. The sidebar on the left, and the chat page on the right. These different\n    // components need different usestate props to open and close different menus pertinenet to them\n    //The most powerful wrapper \n    <div className=\"eminmen\"> \n{/* chat is a component from stream api that wraps the application. Provides \"chat context to childrem including StreamChat client isntance\" */}\n      <Chat client = {instance} theme='team light'>\n            <GroupList\n              newChannel={newChannel}\n              setCreateType={setCreateType}\n              setNewChannel={setNewChannel}\n              setOpenOptions={setOpenOptions}\n              openOptions={openOptions}\n            />\n\n            <ChatPage\n              newChannel={newChannel}\n              openOptions={openOptions}\n              setNewChannel={setNewChannel}\n              setOpenOptions={setOpenOptions}\n              createType={createType}\n            />\n      </Chat>\n    </div>\n  );\n\n}\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}