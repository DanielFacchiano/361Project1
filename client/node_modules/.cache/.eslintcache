[{"/home/dan/Documents/projectv2/front/src/index.js":"1","/home/dan/Documents/projectv2/front/src/App.jsx":"2","/home/dan/Documents/projectv2/front/src/components/index.js":"3","/home/dan/Documents/projectv2/front/src/components/ChatPage.jsx":"4","/home/dan/Documents/projectv2/front/src/components/GroupList.jsx":"5","/home/dan/Documents/projectv2/front/src/components/GroupFinder.jsx":"6","/home/dan/Documents/projectv2/front/src/Stuff/SearchIcon.js":"7","/home/dan/Documents/projectv2/front/src/components/Groups.jsx":"8","/home/dan/Documents/projectv2/front/src/components/PreList.jsx":"9","/home/dan/Documents/projectv2/front/src/components/SignIn.jsx":"10","/home/dan/Documents/projectv2/front/src/components/CreateChannel.jsx":"11","/home/dan/Documents/projectv2/front/src/components/ChannelOptions.jsx":"12","/home/dan/Documents/projectv2/front/src/components/TeamMessage.jsx":"13","/home/dan/Documents/projectv2/front/src/components/ChannelInner.jsx":"14","/home/dan/Documents/projectv2/front/src/Stuff/AddChannel.js":"15","/home/dan/Documents/projectv2/front/src/Stuff/CloseCreate.js":"16","/home/dan/Documents/projectv2/front/src/components/UserList.jsx":"17","/home/dan/Documents/projectv2/front/src/Stuff/InviteIcon.js":"18","/home/dan/Documents/projectv2/front/src/Stuff/ChannelInfo.js":"19"},{"size":224,"mtime":1637019369446,"results":"20","hashOfConfig":"21"},{"size":2338,"mtime":1637132079703,"results":"22","hashOfConfig":"21"},{"size":0,"mtime":1637025973819,"results":"23","hashOfConfig":"21"},{"size":1997,"mtime":1637222806674,"results":"24","hashOfConfig":"21"},{"size":5128,"mtime":1637223193059,"results":"25","hashOfConfig":"21"},{"size":1096,"mtime":1637035500188,"results":"26","hashOfConfig":"21"},{"size":468,"mtime":1637026189328,"results":"27","hashOfConfig":"21"},{"size":1515,"mtime":1637202140616,"results":"28","hashOfConfig":"21"},{"size":1179,"mtime":1637206016214,"results":"29","hashOfConfig":"21"},{"size":5835,"mtime":1637107824285,"results":"30","hashOfConfig":"21"},{"size":2898,"mtime":1637207246266,"results":"31","hashOfConfig":"21"},{"size":3631,"mtime":1637272344033,"results":"32","hashOfConfig":"21"},{"size":1791,"mtime":1637131342912,"results":"33","hashOfConfig":"21"},{"size":3363,"mtime":1637222876363,"results":"34","hashOfConfig":"21"},{"size":734,"mtime":1637186192775,"results":"35","hashOfConfig":"21"},{"size":825,"mtime":1637188446702,"results":"36","hashOfConfig":"21"},{"size":4266,"mtime":1637198265548,"results":"37","hashOfConfig":"21"},{"size":1114,"mtime":1637195357787,"results":"38","hashOfConfig":"21"},{"size":757,"mtime":1637222571965,"results":"39","hashOfConfig":"21"},{"filePath":"40","messages":"41","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"42"},"4xpppz",{"filePath":"43","messages":"44","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"45","usedDeprecatedRules":"42"},{"filePath":"46","messages":"47","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"48"},{"filePath":"49","messages":"50","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"51","usedDeprecatedRules":"42"},{"filePath":"52","messages":"53","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"54","usedDeprecatedRules":"42"},{"filePath":"55","messages":"56","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"57","usedDeprecatedRules":"42"},{"filePath":"58","messages":"59","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"42"},{"filePath":"60","messages":"61","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"42"},{"filePath":"62","messages":"63","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"64","usedDeprecatedRules":"42"},{"filePath":"65","messages":"66","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"67","usedDeprecatedRules":"42"},{"filePath":"68","messages":"69","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"42"},{"filePath":"70","messages":"71","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"72","messages":"73","errorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":0,"source":"74","usedDeprecatedRules":"42"},{"filePath":"75","messages":"76","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"77","usedDeprecatedRules":"42"},{"filePath":"78","messages":"79","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"42"},{"filePath":"80","messages":"81","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"42"},{"filePath":"82","messages":"83","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"84","usedDeprecatedRules":"42"},{"filePath":"85","messages":"86","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"42"},{"filePath":"87","messages":"88","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"42"},"/home/dan/Documents/projectv2/front/src/index.js",[],["89","90"],"/home/dan/Documents/projectv2/front/src/App.jsx",["91","92"],"import './App.css';\nimport {StreamChat} from 'stream-chat'\nimport Cookies from 'universal-cookie'\nimport { Chat } from 'stream-chat-react' //The Main wrapper for all the stream api Channel shenanigans we are using\nimport { useState } from 'react';\n//THis is what styles the components of Stream Chat. If the styles look professional anywhere its this\nimport 'stream-chat-react/dist/css/index.css'\n\n\n//where we import our components into the program\nimport ChatPage from './components/ChatPage' \nimport GroupList from './components/GroupList'\nimport GroupFinder from './components/GroupFinder';\nimport Groups from './components/Groups';\nimport SignIn from './components/SignIn';\n\n\n//Our API key for stream chat, we use the stream chat to get and instance of it to hoist into the chat client\nvar streamKey='7z6fubsdagca'\nconst cookies = new Cookies();\nconst userSignedIn = cookies.get(\"token\");\nvar instance = StreamChat.getInstance(streamKey)\n\nif(userSignedIn) {\n  instance.connectUser({\n      token : cookies.get('token'),\n      name: cookies.get('username'),\n      fullName: cookies.get('fullname'),\n      id: cookies.get('userId'),\n      hashedPassword: cookies.get('hashedPassword')\n  }, userSignedIn)\n}\nconsole.log(userSignedIn)\n// The main componenet we put into the html document\nfunction App() {\n  const [createType, setCreateType] = useState('')\n  const [newChannel, setNewChannel] = useState(false)\n  const [openOptions, setOpenOptions] = useState(false)\n\n\n  if(userSignedIn == null){ return <SignIn /> \n\n\n  }\n  return (\n    //The most powerful wrapper \n    <div className=\"eminmen\">\n{/* chat is a component from stream api that wraps the application. Provides \"chat context to childrem including StreamChat client isntance\" */}\n      <Chat client = {instance} theme='team light'>\n            <GroupList\n              newChannel={newChannel}\n              setCreateType={setCreateType}\n              setNewChannel={setNewChannel}\n              setOpenOptions={setOpenOptions}\n              openOptions={openOptions}\n            />\n\n            <ChatPage\n              newChannel={newChannel}\n              openOptions={openOptions}\n              setNewChannel={setNewChannel}\n              setOpenOptions={setOpenOptions}\n              createType={createType}\n            />\n      </Chat>\n    </div>\n  );\n\n}\n\nexport default App;\n","/home/dan/Documents/projectv2/front/src/components/index.js",[],["93","94"],"/home/dan/Documents/projectv2/front/src/components/ChatPage.jsx",["95"],"import React from 'react'\nimport {useChatContext} from \"stream-chat-react\"\nimport {Channel} from \"stream-chat-react\"\nimport CreateChannel from './CreateChannel';\nimport ChannelOptions from './ChannelOptions';\nimport TeamMessage from './TeamMessage';\nimport ChannelInner from './ChannelInner';\n\n\nvar channelStyle = {\n    height: \"100%\",\n    width: \"100%\",\n  };\n\nvar EmptyChannelStyle = {\n    display: \"flex\",\n    height: \"100%\",\n    flexDirection: \"column\",\n    justifyContent: \"flex-end\",\n    marginLeft: \"20px\",\n    marginRight: \"20px\",\n    paddingBottom: \"20px\"\n  };\n\n  var EmptyChannelParagraphStyle = {\n    fontFamily: \"sans-serif\",\n    fontWeight: \"bold\",\n    fontSize: \"18px\",\n    lineHeight: \"120%\",\n    color: \"#2c2c30\",\n    marginBottom: \"10px\"\n  };\n  var EmptyChannelParagraphTwoStyle = {\n    fontSize: \"14px\",\n    lineHeight: \"120%\",\n    margin: \"0\",\n    color: \"#858688\"\n  };\n\nfunction ChatPage(\n    { newChannel, openOptions, setNewChannel, setOpenOptions, createType }\n    ) {\n    const { channel } = useChatContext();\n\n    if(newChannel){\n        return(\n            <div style={channelStyle}>\n                <CreateChannel createType={createType} setNewChannel={setNewChannel} />\n            </div>\n        )\n    }\n\n    if(openOptions){\n        return(\n            <div style={channelStyle}>\n                <ChannelOptions setOpenOptions={setOpenOptions}/>\n            </div>\n        )\n    }\n\n    const noState=() => (\n        <div style={EmptyChannelStyle}>\n            <p style={EmptyChannelParagraphStyle}>Chat History Start: </p>\n            <p style={EmptyChannelParagraphTwoStyle}>Send stuff</p>\n        </div>\n    )\n\n    return (\n        <div style={channelStyle}>\n            <Channel\n                EmptyStateIndicator={noState}\n                Message={(messageProps, i) => <TeamMessage key={i} {...messageProps} />}\n            >\n                <ChannelInner setOpenOptions={setOpenOptions} />\n            </Channel >\n        </div>\n    )\n}\n\nexport default ChatPage\n","/home/dan/Documents/projectv2/front/src/components/GroupList.jsx",["96","97","98","99"],"import React, { useState, useEffect} from 'react'\nimport Cookies from 'universal-cookie';\nimport { useChatContext, ChannelList } from 'stream-chat-react'\nimport icon1 from '../Stuff/icon1.png'\nimport icon2 from '../Stuff/icon2.png'\nimport icon3 from '../Stuff/icon3.png'\n\nimport GroupFinder from './GroupFinder';\nimport Groups from './Groups';\nimport PreList from './PreList';\nconst cookies = new Cookies();\n\n\n//channel-list__container\nvar listStyle = {\n    display: \"flex\",\n    height: \"100%\"\n}\n\nvar ListHeaderStyle = {\n    color: 'red',\n    padding: \"0 20px\",\n    display: \"flex\",\n    justifyContent: \"space-between\",\n    alignItems: \"center\"\n\n  };\n//We can use inline styles by creating a json of styles and setting style attribute to them inline\nvar titleStyle = {\n    fontFamily: \"sans-serif\",\n    fontStyle: \"normal\",\n    fontWeight: \"bold\",\n    fontSize: \"18px\",\n    lineHeight: \"28px\",\n}\n\nfunction ListHeader(){ \n    return (\n    <div style={ListHeaderStyle}>\n        <p style={titleStyle} >Groups:</p>\n\n    </div>\n    )\n}\n\nfunction IconsHolder({logout, opts}) {\n    return (\n    <div className=\"icon_side_container\">\n        <div className=\"icon1\">\n            <img className ='iconimg1' src={icon1} alt=\"appIcon\" width=\"30\"/>\n        </div>\n        <div className=\"icon2\" onClick={opts}>\n            <img className='options' src={icon3} alt=\"OptionsIcon\" width=\"30\"/>\n        </div>\n        <div className=\"icon2\" onClick={logout}>\n            <img className='iconimg2' src={icon2} alt=\"LogoutIcon\" width=\"30\"/>\n        </div>\n    </div>\n    )\n}\n\nfunction channelFilter(channels){\n    return channels.filter((channel) => channel.type === 'team' ) // Return channels where the type is team\n}\n\nfunction messageFilter(channels){\n    return channels.filter((channel) => channel.type === 'messaging' ) // Return channels where the type is team\n}\n\n//We have our icon bar that we render, we then place the group container header and holder. We use the stream API\n// ChannelList component to display channels, but we create our own group list component of which we pass to the \n// api's channel component as a function of the listProp prop\n// Preview and Group list are optional, if not provided, stream chat provides its own channel list\n// First preview shows groups, the second shows direct messaging\nfunction GroupListContent({setNewChannel, setCreateType, newChannel, setOpenOptions, openOptions }){\n    const { client} = useChatContext();\n\n    function opts() {\n        setOpenOptions(!openOptions)\n    }\n\n    function logout(){\n        cookies.remove('token');\n        cookies.remove('username');\n        cookies.remove('fullname');\n        cookies.remove('userId');\n        cookies.remove('hashedPassword');\n        window.location.reload();\n    }\n\n    const filters = { members:{$in: [client.userID]}} //Get all channels where our current user is in it\n\n\n    return (\n        <>\n           <IconsHolder logout={logout} opts={opts} />\n            <div className =\"group-list-wrapper\"> \n               <ListHeader />\n               <GroupFinder /> \n               <ChannelList\n                    filters={filters}\n                    GroupList   channelRenderFilterFn={channelFilter}\n                    List={(listProps) => (\n                        <Groups \n                            {...listProps}\n                            type=\"team\"\n                            setNewChannel={setNewChannel}\n                            setCreateType={setCreateType} \n                            newChannel={newChannel}\n                            setOpenOptions={setOpenOptions}\n                        />\n                    )}\n\n               />\n               <ChannelList\n                    filters={filters}\n                    channelRenderFilterFn={messageFilter}\n                    List={(listProps) => (\n                        <Groups \n                            {...listProps}\n                            type=\"messaging\"\n                            setNewChannel={setNewChannel}\n                            setCreateType={setCreateType} \n                            newChannel={newChannel}\n                            setOpenOptions={setOpenOptions}\n                        />\n                    )}\n                    /*\n                    Preview={(previewProps) => (\n                        <PreList\n                            {... previewProps}\n                            type=\"messaging\"\n                        />\n                    )}\n                    */\n               />\n            </div>\n        </>\n    )\n}\n\nfunction GroupList({setNewChannel, setCreateType, newChannel, setOpenOptions, openOptions }){\n    const[toggleContainer, setToggleContainer] = useState(false)\n    return(\n        <>\n            <div style={listStyle}>\n                <GroupListContent\n                    setNewChannel={setNewChannel} \n                    setCreateType={setCreateType} \n                    newChannel={newChannel} \n                    setOpenOptions={setOpenOptions}\n                    openOptions={openOptions}\n                />\n            </div>\n        </>\n    )\n\n}\n\nexport default GroupList\n","/home/dan/Documents/projectv2/front/src/components/GroupFinder.jsx",["100","101","102"],"import React, { useState, useEffect} from 'react'\nimport {useChatContext} from 'stream-chat-react'\nimport {SearchIcon} from '../Stuff/SearchIcon'\n\n\n\nfunction GroupFinder() {\n    const [parsing, setParsing] = useState(false);\n    const [searchValue, setSearchValue] = useState('');\n\n\n    const getGroups = async(text)=>{\n        try{\n            //get the channels\n\n        } catch (error) {\n            setSearchValue('')\n        }\n    }\n\n    const newText = (e) =>{\n        e.preventDefault();\n        setParsing(true);\n        //Event holds the text under its target value\n        setSearchValue(e.target.value)\n        // get groups with this value\n        getGroups(e.target.value)\n    }\n\n    return (\n        <div className=\"group_finder_container\">\n            <p>\n                    <SearchIcon />\n            </p>\n            <input\n                className=\"search_input\"\n                type=\"text\"\n                value = {searchValue}\n                onChange = {newText}\n                placeholder=\"Group Finder\"\n\n            />\n        </div>\n    )\n}\n\nexport default GroupFinder\n","/home/dan/Documents/projectv2/front/src/Stuff/SearchIcon.js",[],"/home/dan/Documents/projectv2/front/src/components/Groups.jsx",[],"/home/dan/Documents/projectv2/front/src/components/PreList.jsx",["103","104","105"],"import React from 'react'\nimport {useChat, useChatContext} from 'stream-chat-react'\n\n//somethings wrong here, group preface and preview list should get got\nfunction PreList({ channel, type }) {\n    var {channel: activeChannel, client } =useChatContext();\n\n    function DirectPreview(){\n        return(\n            <p>\n                # {channel?.data?.name || channel?.data?.id}\n            </p>\n\n    )};\n    function ChannelPreview(){\n        return(\n        <p className=\"channel-preview__item\">\n            # {channel?.data?.name || channel?.data.id}\n\n        </p>\n    )};\n\n    function previewList(){\n        var mems = Object.values(channel.state.members).filter(({user})=> user.id != client.userID);\n        return (\n            <div>\n                <p>{mems[0]?.user?.fullName}</p>\n            </div>\n        )\n    };\n\n    return (\n        <div className={\n            channel?.id === activeChannel?.id\n                ? 'selected_preview' : 'deselected_preview'\n        }\n        onClick={() =>{\n            console.log(channel)\n        }}\n        >\n\n             {type === 'team' ? <ChannelPreview /> : <DirectPreview />}\n        </div>\n    )\n}\n\nexport default PreList\n","/home/dan/Documents/projectv2/front/src/components/SignIn.jsx",["106"],"import React from 'react'\nimport {useState} from 'react'\nimport axios from 'axios'\nimport Cookies from 'universal-cookie'\n\nvar SignInInputs = {\n    flex: \"1\",\n    display: \"flex\",\n    flexDirection: \"column\",\n    background: \"lightblue\",  \n    padding: \"6rem\",\n    justifyContent: \"center\"\n  }\n\nvar SignInContainerStyle = {\n    minHeight: \"100vh\",\n    display: \"flex\",\n    flexDirection: \"row\"\n  };\n\n  var SignUpText = {\n    display: \"flex\",\n    padding: \"24px\",\n    borderRadius: \"10px\",\n    background: \"white\",\n    flexDirection: \"column\"\n\n  }\n  var switchStyle = {\n    display: \"flex\",\n    justifyContent: \"flex-start\",\n    alignItems: \"center\",\n    marginTop: \"0.2rem\"\n  }\n\n  var buttonColor = {\n      color : \"blue\",\n      cursor: \"pointer\"\n  }\n\n  var buttonHolderStyle= {\n    marginTop: \"2rem\",\n    display: \"flex\",\n    justifyContent: \"flex-start\"\n  }\n  var buttonStyle={\n    borderRadius: \"4px\",\n    background: \"#000000\",\n    border: \"1px solid #005fff\",\n    color: \"#fff\",\n    fontWeight: \"500\",\n    padding:\" 0.5rem 1.1rem\",\n    cursor: \"pointer\",\n    transition: \"0.3s ease\"\n  }\n\n  var initialFields = {\n    fullName: '',\n    username: '',\n    password: '',\n    confirmPassword:''\n}\n\nconst cookies = new Cookies();\n\nfunction SignIn() {\n// fields of the sign in/up form saved as a use state to send to the server\n    const [fields, setFields] = useState(false);\n    const [signIn, setSignIn] = useState(false);\n//If we hit the mode change button, we change modes (signin/signup)\n    function nextMode(){\n        setSignIn(!signIn)\n    }\n// If we detect that something has changed in one of the inputs, we pass all the previous fields to fields usestate, \n//and then we set the specifc fields of the input that was changed to the new detected value. \n    function detectChange(e){\n        setFields({...fields, [e.target.name]: e.target.value })\n\n    }\n    async function handleSubmit(e){\n        e.preventDefault();\n\n        const {fullName, username, password} = fields\n        const URL =\"http://localhost:4000/form\";\n        const { data: {token, userId, hashedPassword} } = await axios.post(`${URL}/${signIn ? 'signin' : 'register'}`,{\n            username, password, fullName\n        })\n        cookies.set('token', token)\n        cookies.set('username', username)\n        cookies.set('fullName', fullName)\n        cookies.set('userId', userId)\n\n        if(!signIn){\n            cookies.set('hashedPassword', hashedPassword)   \n        }\n        //after cookies have been set, we reload the window\n        window.location.reload();\n\n    }\n\n    return (\n        <div style={SignInContainerStyle}>\n            <div style={SignInInputs}>\n                <p style={SignUpText}> \n                    <h2>{signIn ? 'Sign In Here:' : 'Sign Up Here:'}</h2>\n                    <form onSubmit={handleSubmit}>\n                        {!signIn && (\n                            <div className= \"input_field\">\n                                <label htmlFor=\"fullName\">Full Name </label>\n                                <input\n                                    name=\"fullName\"\n                                    onChange={detectChange}\n                                    type=\"text\"\n                                    placeholder=\"Insert Full Name\"\n                                    required\n                                />\n                            </div>\n                        )}\n\n                            <div className= \"input_field\">\n                                <label htmlFor=\"username\">UserName </label>\n                                <input\n                                    name=\"username\"\n                                    onChange={detectChange}\n                                    type=\"text\"\n                                    placeholder=\"Insert username\"\n                                    required\n                                />\n                            </div>\n                            <div className= \"input_field\">\n                                <label htmlFor=\"password\">Password </label>\n                                <input\n                                    name=\"password\"\n                                    onChange={detectChange}\n                                    type=\"password\"\n                                    placeholder=\"Insert password here\"\n                                    required\n                                />\n                            </div>\n                            {!signIn && (\n                            <div className= \"input_field\">\n                                <label htmlFor=\"confirmPassword\">Confirm Password </label>\n                                <input\n                                    name=\"confirmPassword\"\n                                    onChange={detectChange}\n                                    type=\"password\"\n                                    placeholder=\"confirm_password\"\n                                    required\n                                />\n                            </div>\n                        )}\n                        <div style = {buttonHolderStyle}>\n                            <button style = {buttonStyle}>\n                                {!signIn ? \"Sign Up!\" : \"Sign In!\"}\n                            </button>\n                            \n                        </div>\n                    </form>\n                    <div style={switchStyle}>\n                        <p>\n                            {signIn ? \"Go to Sign Up Page:\" : \"Go to Sign In Page:\"}\n                            <div style ={buttonColor}onClick={nextMode}>\n                                {signIn ? 'Sign Up' : 'Sign In'}\n                            </div>\n                        </p>\n                    </div>\n                </p>\n            </div>\n        </div>\n    )\n}\n\nexport default SignIn\n","/home/dan/Documents/projectv2/front/src/components/CreateChannel.jsx",[],"/home/dan/Documents/projectv2/front/src/components/ChannelOptions.jsx",["107","108","109"],"/home/dan/Documents/projectv2/front/src/components/TeamMessage.jsx",["110","111","112","113","114","115","116"],"import React, { useState } from 'react';\nimport { MessageTeam, useMessageContext } from 'stream-chat-react';\nconst urlStr = 'https://scrape.quin.fish/';\n\n\nconst TeamMessage = (Message, i) => {\n    const { handleOpenThread, message } = useMessageContext();\n    const [imageUrl, setImageUrl] = useState('1111');\n   \n    const setImg = (newUrl) => {\n        setImageUrl(newUrl);\n      } \n\n\n    var lastFive = message.text.substr(message.text.length - 4);\n    var firstFive = message.text.substr(0, 4);\n    var isUrl = false\n    if((lastFive==\".com\" ||lastFive==\"com/\" || lastFive==\"edu/\") && firstFive == \"http\"){\n        isUrl = true\n    }\n\n    var imgUrl = \"\"\n    console.log(message.user.name)\n    if (isUrl){\n        console.log(\"hello\")\n\t\tvar req = new XMLHttpRequest();\n        var payload = {url:null};\n        payload.url = message.text\n        req.open('POST', urlStr, true);\n\t\treq.setRequestHeader('Content-Type', 'application/json');\n\t\treq.addEventListener('load', function(){\n\t\t\tif(req.status>= 200 && req.status < 400){\n\t\t\t\tvar response = JSON.parse(req.responseText);\t//Creates array of rows, super helpful for front end\n\t\t\t\tconsole.log(response.data.images[0]);// log to console what we got back\n                imgUrl=response.data.images[0]\n                setImg(imgUrl)\n\n\t\t\t}\n\t\t\telse{\n\t\t\t\tconsole.log(\"Error (did you put blank input?)\"+req.statusText);\n\t\t\t}\n\t\t});\n        req.send(JSON.stringify(payload));   \n    }\n    \n    return (\n        <div className=\"message_container\">\n            <p className=\"userName_message\">\n            {message.user.name}:\n            </p>\n            {message.text} \n \n            {isUrl ? <div><a href={message.text}>  <img src={imageUrl} width=\"150\" height=\"100\" ></img></a> </div>: ''}\n\n        </div>\n    )\n}\n\nexport default TeamMessage\n","/home/dan/Documents/projectv2/front/src/components/ChannelInner.jsx",["117","118"],"import React, { useState } from 'react';\nimport { MessageList, MessageInput, Thread,  useChannelActionContext, useChannelStateContext, useChatContext, Window} from 'stream-chat-react';\n// This component is made up of a bunch of stream chat components\nimport {ChannelInfo} from '../Stuff/ChannelInfo'\n\nexport const Contexto = React.createContext({});\n//.team-channel-header__name-wrapper {\n \nvar ListHeaderStyle = {\n  flex: \"3\",\n  display: \"flex\",\n  alignItems: \"center\",\n  overflowX: \"auto\",\n  maxWidth: \"520px\",\n  whiteSpace: \"nowrap\",\n  scrollbarWidth: \"none\",\n\n};\n\nvar multi_header ={\n  display: \"flex\",\n  alignItems: \"center\",\n  marginRight: \"9px\"\n}\n\nvar channel_header=\n{\n  fontFamily: \"sans-serif\",\n  fontWeight: \"bold\",\n  fontSize: \"18px\",\n  color: \"#2c2c30\",\n  marginRight: \"8px\"\n}\n\nvar right_text = {\n  fontFamily:\"sans-serif\",\n  fontSize: \"14px\",\n  color: \"#858688\"\n}\n\n\nvar right_text_inner= {\n  display: \"flex\",\n  paddingLeft: \"12px\"\n}\n\nvar header_container=\n{\n  height: \"72px\"\n}\n\n\nfunction ChannelInner({ setOpenOptions }){\n\n  const [messageState, setMessageState] = useState(false);\n\n  const { postMessage } = useChannelActionContext();\n  \n  const SubmitHandler = (message) => {\n    var updatedMessage = {\n      mentioned_users: message.mentioned_users,\n      text: message.text,\n      parent: message.parent,\n      parent_id: message.parent?.id,\n      attachments: message.attachments,\n    };\n    \n    if (messageState == true) {\n      updatedMessage = { ...updatedMessage, text: `/giphy ${message.text}` };\n    }\n    \n    if (postMessage == true) {\n      postMessage(updatedMessage);\n      setMessageState(false);\n    }\n  };\n\n  return (\n    <Contexto.Provider value={{ messageState, setMessageState }}>\n      <div style={{ display: 'flex', width: '100%' }}>\n        <Window>\n          <TeamChannelHeader setOpenOptions={setOpenOptions} />\n          <MessageList />\n          <MessageInput SubmitHandler={SubmitHandler} />\n        </Window>\n        <Thread />\n      </div>\n    </Contexto.Provider>\n  );\n};\n\nconst TeamChannelHeader = ({ setOpenOptions }) => {\n    var { channel, watcher_count } = useChannelStateContext();\n    var { client } = useChatContext();\n  \n    const MessagingHeader = () => {\n      const members = Object.values(channel.state.members).filter(({ user }) => user.id !== client.userID);\n  \n      if(channel.type === 'messaging') {\n        return (\n          <div style={ListHeaderStyle}>\n            {members.map(({ user }, i) => (\n              <div key={i} style={multi_header}>\n                <p>{user.fullName}</p>\n              </div>\n            ))}\n          </div>\n        );\n      }\n  \n      return (\n        <div className='channel-inner-header-wrap2'>\n          <p style={channel_header}>Group: {channel.data.name} || Code: </p>\n          <span style={{ display: 'flex' }} onClick={() => setOpenOptions(true)}>\n            <ChannelInfo />\n          </span>\n        </div>\n      );\n    };\n  \n    const getWatcherText = (watchers) => {\n      if (!watchers) return 'Nobody is online';\n      else{\n      return `${watchers} users online in group`;\n    }\n    };\n  \n    return (\n      <div style={header_container}>\n        <MessagingHeader />\n        <div style={right_text_inner}>\n          <p style={right_text}>{getWatcherText(watcher_count)}</p>\n        </div>\n      </div>\n    );\n  };\n\n  export default ChannelInner;","/home/dan/Documents/projectv2/front/src/Stuff/AddChannel.js",[],"/home/dan/Documents/projectv2/front/src/Stuff/CloseCreate.js",[],"/home/dan/Documents/projectv2/front/src/components/UserList.jsx",["119","120","121"],"import React, {useEffect, useState} from 'react'\nimport {useChatChannel, useChatContext} from 'stream-chat-react'\nimport {InviteIcon} from '../Stuff/InviteIcon'\n\n// Column flex box\nvar channelStyle = {\n    display: \"flex\",\n    flexDirection: \"column\",\n    height: \"100%\"\n  };\n// style for the heade, justify content space between sets paragraphs oppostie\n  var headerStyle={\n    display: \"flex\",\n    alignItems: \"center\",\n    margin: \"0px 20px\",\n    justifyContent: \"space-between\"\n  };\n\n//Justify space here makes sure the name shows up on the left, and the invite icon shows up on the right\n  var ListItemUserWrapper={\n    display: \"flex\",\n    alignItems: \"center\",\n    margin: \"0px 20px\",\n    justifyContent: \"space-between\"\n  };\n\n  var ListItemUserWrapperName={\n    display: \"flex\",\n    alignItems: \"center\",\n    flex: \"2\",\n    textAlign: \"left\"\n  };\n\n  var emptyCheck = {\n    height: \"28px\",\n    width: \"28px\",\n    background: \"#f7f6f8\",\n    border: \"1px solid #dedddf\",\n    borderRadius: \"14px\",\n    boxSizing: \"border-box\",\n    marginLeft: \"4px\",\n    cursor:'pointer'\n  }\n\n\n\nfunction MasterList({ children }){\n    return(\n        <div style={channelStyle}>\n            <div style={headerStyle}>\n                <p>Members</p>\n                <p>Group Invite</p>\n            </div>\n            {children}\n        </div>\n    )\n}\n\n\nfunction ListItemUser({ user, setCheckedUsers}){\n    const [checked, setChecked] = useState(false)\n    function detectCheck(){\n        //If we detect a check, we filter out this user from the list of checked users in the createChannel components state\n        if(checked == true){\n            setCheckedUsers((prevUsers) => prevUsers.filter((prevUser) => prevUser !== user.id))\n        }\n        //else, we keep the previous list and add this user id to it\n        else{\n            setCheckedUsers((prevUsers) => [...prevUsers, user.id])\n        }\n\n\n        setChecked(!checked)\n    }\n    return(\n        <div style={ListItemUserWrapper} onClick={detectCheck}>\n            <div style={ListItemUserWrapperName}>\n                <p>\n                    {user.name || user.id}\n                </p>\n            </div>\n            {checked ? <InviteIcon /> : <div style={emptyCheck}></div>}\n        </div>\n    )\n}\n\n\nfunction UserList({setCheckedUsers}){ \n    const {client} = useChatContext()\n    const [users, setUsers] = useState([]);\n    const [loading, setLoading] = useState(false);\n    const [empty, setEmpty] = useState(false);\n    const [err, setErr] = useState(false)\n\n    useEffect(()=> {\n        const getUsers = async () => {\n            if(loading) return //If we are already getting the lost, don't keep trying to get it\n            //loading set to true for the try catch block, where we query users from stream chat \n            setLoading(true) \n            \n            //Async call to the stream chat client, filter out our own user, set range of users\n            try {\n                const response = await client.queryUsers(\n                    {id: {$ne :client.userID}}, // query users from stream chats current context, exclude the logged in user\n                    {id : 1},\n                    {limit: 10}\n                );\n                    //If response has entries, set users array to the response or set empty flag as true\n                if(response.users.length) {\n                    setUsers(response.users)\n                } else {\n                    setEmpty(true)\n                }\n            } catch (error) {\n                setErr(true)\n\n            }\n            setLoading(false) // We have finished retreiving the user list into the use states \n        }\n\n        if(client) getUsers()\n\n    },[])\n    if(err){\n        return (<MasterList>\n          <div> Issue loading users </div>\n        </MasterList>\n        )\n    }\n\n    if(empty){\n        return (<MasterList>\n          <div> No members available </div>\n        </MasterList>\n        )\n    }\n\n    return (\n    <MasterList>\n        {loading ? \n        <p>\n            Loading Invitation Page\n        </p> : \n            (users?.map((user, i)=>(\n                <ListItemUser index={i} key={user.id} user={user} setCheckedUsers={setCheckedUsers}/>\n            ))\n            )}\n    </MasterList>\n\n    )\n}\n\nexport default UserList\n","/home/dan/Documents/projectv2/front/src/Stuff/InviteIcon.js",[],"/home/dan/Documents/projectv2/front/src/Stuff/ChannelInfo.js",[],{"ruleId":"122","replacedBy":"123"},{"ruleId":"124","replacedBy":"125"},{"ruleId":"126","severity":1,"message":"127","line":13,"column":8,"nodeType":"128","messageId":"129","endLine":13,"endColumn":19},{"ruleId":"126","severity":1,"message":"130","line":14,"column":8,"nodeType":"128","messageId":"129","endLine":14,"endColumn":14},{"ruleId":"122","replacedBy":"131"},{"ruleId":"124","replacedBy":"132"},{"ruleId":"126","severity":1,"message":"133","line":43,"column":13,"nodeType":"128","messageId":"129","endLine":43,"endColumn":20},{"ruleId":"126","severity":1,"message":"134","line":1,"column":27,"nodeType":"128","messageId":"129","endLine":1,"endColumn":36},{"ruleId":"126","severity":1,"message":"135","line":10,"column":8,"nodeType":"128","messageId":"129","endLine":10,"endColumn":15},{"ruleId":"126","severity":1,"message":"136","line":143,"column":11,"nodeType":"128","messageId":"129","endLine":143,"endColumn":26},{"ruleId":"126","severity":1,"message":"137","line":143,"column":28,"nodeType":"128","messageId":"129","endLine":143,"endColumn":46},{"ruleId":"126","severity":1,"message":"134","line":1,"column":27,"nodeType":"128","messageId":"129","endLine":1,"endColumn":36},{"ruleId":"126","severity":1,"message":"138","line":2,"column":9,"nodeType":"128","messageId":"129","endLine":2,"endColumn":23},{"ruleId":"126","severity":1,"message":"139","line":8,"column":12,"nodeType":"128","messageId":"129","endLine":8,"endColumn":19},{"ruleId":"126","severity":1,"message":"140","line":2,"column":9,"nodeType":"128","messageId":"129","endLine":2,"endColumn":16},{"ruleId":"126","severity":1,"message":"141","line":23,"column":14,"nodeType":"128","messageId":"129","endLine":23,"endColumn":25},{"ruleId":"142","severity":1,"message":"143","line":24,"column":83,"nodeType":"144","messageId":"145","endLine":24,"endColumn":85},{"ruleId":"126","severity":1,"message":"146","line":57,"column":7,"nodeType":"128","messageId":"129","endLine":57,"endColumn":20},{"ruleId":"126","severity":1,"message":"147","line":72,"column":10,"nodeType":"128","messageId":"129","endLine":72,"endColumn":20},{"ruleId":"142","severity":1,"message":"143","line":92,"column":25,"nodeType":"144","messageId":"145","endLine":92,"endColumn":27},{"ruleId":"142","severity":1,"message":"148","line":95,"column":25,"nodeType":"144","messageId":"145","endLine":95,"endColumn":27},{"ruleId":"126","severity":1,"message":"149","line":2,"column":10,"nodeType":"128","messageId":"129","endLine":2,"endColumn":21},{"ruleId":"126","severity":1,"message":"150","line":7,"column":13,"nodeType":"128","messageId":"129","endLine":7,"endColumn":29},{"ruleId":"142","severity":1,"message":"148","line":18,"column":17,"nodeType":"144","messageId":"145","endLine":18,"endColumn":19},{"ruleId":"142","severity":1,"message":"148","line":18,"column":36,"nodeType":"144","messageId":"145","endLine":18,"endColumn":38},{"ruleId":"142","severity":1,"message":"148","line":18,"column":56,"nodeType":"144","messageId":"145","endLine":18,"endColumn":58},{"ruleId":"142","severity":1,"message":"148","line":18,"column":79,"nodeType":"144","messageId":"145","endLine":18,"endColumn":81},{"ruleId":"151","severity":1,"message":"152","line":53,"column":52,"nodeType":"153","endLine":53,"endColumn":98},{"ruleId":"142","severity":1,"message":"148","line":68,"column":22,"nodeType":"144","messageId":"145","endLine":68,"endColumn":24},{"ruleId":"142","severity":1,"message":"148","line":72,"column":21,"nodeType":"144","messageId":"145","endLine":72,"endColumn":23},{"ruleId":"126","severity":1,"message":"154","line":2,"column":9,"nodeType":"128","messageId":"129","endLine":2,"endColumn":23},{"ruleId":"142","severity":1,"message":"148","line":64,"column":20,"nodeType":"144","messageId":"145","endLine":64,"endColumn":22},{"ruleId":"155","severity":1,"message":"156","line":123,"column":7,"nodeType":"157","endLine":123,"endColumn":9,"suggestions":"158"},"no-native-reassign",["159"],"no-negated-in-lhs",["160"],"no-unused-vars","'GroupFinder' is defined but never used.","Identifier","unusedVar","'Groups' is defined but never used.",["159"],["160"],"'channel' is assigned a value but never used.","'useEffect' is defined but never used.","'PreList' is defined but never used.","'toggleContainer' is assigned a value but never used.","'setToggleContainer' is assigned a value but never used.","'useChatContext' is defined but never used.","'parsing' is assigned a value but never used.","'useChat' is defined but never used.","'previewList' is defined but never used.","eqeqeq","Expected '!==' and instead saw '!='.","BinaryExpression","unexpected","'initialFields' is assigned a value but never used.","'LeaveGroup' is defined but never used.","Expected '===' and instead saw '=='.","'MessageTeam' is defined but never used.","'handleOpenThread' is assigned a value but never used.","jsx-a11y/alt-text","img elements must have an alt prop, either with meaningful text, or an empty string for decorative images.","JSXOpeningElement","'useChatChannel' is defined but never used.","react-hooks/exhaustive-deps","React Hook useEffect has missing dependencies: 'client' and 'loading'. Either include them or remove the dependency array.","ArrayExpression",["161"],"no-global-assign","no-unsafe-negation",{"desc":"162","fix":"163"},"Update the dependencies array to be: [client, loading]",{"range":"164","text":"165"},[3676,3678],"[client, loading]"]