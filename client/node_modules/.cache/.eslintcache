[{"/home/dan/Documents/projectv2/client/src/index.js":"1","/home/dan/Documents/projectv2/client/src/App.jsx":"2","/home/dan/Documents/projectv2/client/src/components/GroupList.jsx":"3","/home/dan/Documents/projectv2/client/src/components/ChatPage.jsx":"4","/home/dan/Documents/projectv2/client/src/components/SignIn.jsx":"5","/home/dan/Documents/projectv2/client/src/components/Groups.jsx":"6","/home/dan/Documents/projectv2/client/src/Stuff/SearchIcon.js":"7","/home/dan/Documents/projectv2/client/src/Stuff/AddChannel.js":"8","/home/dan/Documents/projectv2/client/src/components/CreateChannel.jsx":"9","/home/dan/Documents/projectv2/client/src/components/TeamMessage.jsx":"10","/home/dan/Documents/projectv2/client/src/components/ChannelOptions.jsx":"11","/home/dan/Documents/projectv2/client/src/components/ChannelInner.jsx":"12","/home/dan/Documents/projectv2/client/src/Stuff/CloseCreate.js":"13","/home/dan/Documents/projectv2/client/src/Stuff/ChannelInfo.js":"14","/home/dan/Documents/projectv2/client/src/components/UserList.jsx":"15","/home/dan/Documents/projectv2/client/src/Stuff/InviteIcon.js":"16","/home/dan/Documents/Untitled Folder/361Project1-master/client/src/index.js":"17","/home/dan/Documents/Untitled Folder/361Project1-master/client/src/App.jsx":"18","/home/dan/Documents/Untitled Folder/361Project1-master/client/src/components/ChatPage.jsx":"19","/home/dan/Documents/Untitled Folder/361Project1-master/client/src/components/Groups.jsx":"20","/home/dan/Documents/Untitled Folder/361Project1-master/client/src/components/GroupList.jsx":"21","/home/dan/Documents/Untitled Folder/361Project1-master/client/src/components/SignIn.jsx":"22","/home/dan/Documents/Untitled Folder/361Project1-master/client/src/Stuff/AddChannel.js":"23","/home/dan/Documents/Untitled Folder/361Project1-master/client/src/components/CreateChannel.jsx":"24","/home/dan/Documents/Untitled Folder/361Project1-master/client/src/components/ChannelInner.jsx":"25","/home/dan/Documents/Untitled Folder/361Project1-master/client/src/components/TeamMessage.jsx":"26","/home/dan/Documents/Untitled Folder/361Project1-master/client/src/components/ChannelOptions.jsx":"27","/home/dan/Documents/Untitled Folder/361Project1-master/client/src/Stuff/CloseCreate.js":"28","/home/dan/Documents/Untitled Folder/361Project1-master/client/src/Stuff/ChannelInfo.js":"29","/home/dan/Documents/Untitled Folder/361Project1-master/client/src/components/UserList.jsx":"30"},{"size":224,"mtime":1637019369446,"results":"31","hashOfConfig":"32"},{"size":3004,"mtime":1637466162865,"results":"33","hashOfConfig":"32"},{"size":5557,"mtime":1637475749024,"results":"34","hashOfConfig":"32"},{"size":2408,"mtime":1637475217220,"results":"35","hashOfConfig":"32"},{"size":6239,"mtime":1637476774592,"results":"36","hashOfConfig":"32"},{"size":1578,"mtime":1637475700063,"results":"37","hashOfConfig":"32"},{"size":468,"mtime":1637026189328,"results":"38","hashOfConfig":"32"},{"size":734,"mtime":1637186192775,"results":"39","hashOfConfig":"32"},{"size":3703,"mtime":1637476090412,"results":"40","hashOfConfig":"32"},{"size":2206,"mtime":1637482025371,"results":"41","hashOfConfig":"32"},{"size":4602,"mtime":1637471055826,"results":"42","hashOfConfig":"32"},{"size":3815,"mtime":1637470208481,"results":"43","hashOfConfig":"32"},{"size":825,"mtime":1637188446702,"results":"44","hashOfConfig":"32"},{"size":757,"mtime":1637222571965,"results":"45","hashOfConfig":"32"},{"size":5164,"mtime":1637483696635,"results":"46","hashOfConfig":"32"},{"size":1114,"mtime":1637195357787,"results":"47","hashOfConfig":"32"},{"size":258,"mtime":1638497419389,"results":"48","hashOfConfig":"49"},{"size":3708,"mtime":1638516792342,"results":"50","hashOfConfig":"49"},{"size":1851,"mtime":1638513628195,"results":"51","hashOfConfig":"49"},{"size":2450,"mtime":1638513335880,"results":"52","hashOfConfig":"49"},{"size":6410,"mtime":1638513129724,"results":"53","hashOfConfig":"49"},{"size":6943,"mtime":1638513852520,"results":"54","hashOfConfig":"49"},{"size":945,"mtime":1638507035546,"results":"55","hashOfConfig":"49"},{"size":4676,"mtime":1638505631787,"results":"56","hashOfConfig":"49"},{"size":4950,"mtime":1638513483008,"results":"57","hashOfConfig":"49"},{"size":2583,"mtime":1638516505439,"results":"58","hashOfConfig":"49"},{"size":5147,"mtime":1638510964131,"results":"59","hashOfConfig":"49"},{"size":1152,"mtime":1638510991240,"results":"60","hashOfConfig":"49"},{"size":689,"mtime":1638508040214,"results":"61","hashOfConfig":"49"},{"size":5898,"mtime":1638516093005,"results":"62","hashOfConfig":"49"},{"filePath":"63","messages":"64","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"65"},"12uut2j",{"filePath":"66","messages":"67","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"68","messages":"69","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"70","messages":"71","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"72","messages":"73","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"74","messages":"75","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"76","messages":"77","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"65"},{"filePath":"78","messages":"79","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"65"},{"filePath":"80","messages":"81","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"82","messages":"83","errorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"84","messages":"85","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"86","messages":"87","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"88","messages":"89","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"65"},{"filePath":"90","messages":"91","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"65"},{"filePath":"92","messages":"93","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"94","messages":"95","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"65"},{"filePath":"96","messages":"97","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"iqfogk",{"filePath":"98","messages":"99","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"100","messages":"101","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"102","usedDeprecatedRules":"103"},{"filePath":"104","messages":"105","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"106","usedDeprecatedRules":"103"},{"filePath":"107","messages":"108","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"109","usedDeprecatedRules":"103"},{"filePath":"110","messages":"111","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"103"},{"filePath":"112","messages":"113","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"103"},{"filePath":"114","messages":"115","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"103"},{"filePath":"116","messages":"117","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"118","usedDeprecatedRules":"103"},{"filePath":"119","messages":"120","errorCount":0,"warningCount":8,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"121","messages":"122","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"123","usedDeprecatedRules":"103"},{"filePath":"124","messages":"125","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"103"},{"filePath":"126","messages":"127","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"103"},{"filePath":"128","messages":"129","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"130","usedDeprecatedRules":"103"},"/home/dan/Documents/projectv2/client/src/index.js",[],["131","132"],"/home/dan/Documents/projectv2/client/src/App.jsx",["133"],"/home/dan/Documents/projectv2/client/src/components/GroupList.jsx",["134","135","136"],"/home/dan/Documents/projectv2/client/src/components/ChatPage.jsx",["137"],"/home/dan/Documents/projectv2/client/src/components/SignIn.jsx",["138"],"/home/dan/Documents/projectv2/client/src/components/Groups.jsx",[],"/home/dan/Documents/projectv2/client/src/Stuff/SearchIcon.js",[],"/home/dan/Documents/projectv2/client/src/Stuff/AddChannel.js",[],"/home/dan/Documents/projectv2/client/src/components/CreateChannel.jsx",[],"/home/dan/Documents/projectv2/client/src/components/TeamMessage.jsx",["139","140","141","142","143","144","145"],"/home/dan/Documents/projectv2/client/src/components/ChannelOptions.jsx",["146","147"],"/home/dan/Documents/projectv2/client/src/components/ChannelInner.jsx",["148","149"],"/home/dan/Documents/projectv2/client/src/Stuff/CloseCreate.js",[],"/home/dan/Documents/projectv2/client/src/Stuff/ChannelInfo.js",[],"/home/dan/Documents/projectv2/client/src/components/UserList.jsx",["150","151","152"],"/home/dan/Documents/projectv2/client/src/Stuff/InviteIcon.js",[],"/home/dan/Documents/Untitled Folder/361Project1-master/client/src/index.js",[],"/home/dan/Documents/Untitled Folder/361Project1-master/client/src/App.jsx",["153"],"/home/dan/Documents/Untitled Folder/361Project1-master/client/src/components/ChatPage.jsx",["154"],"import React from 'react'\nimport {useChatContext} from \"stream-chat-react\"\nimport {Channel} from \"stream-chat-react\"\nimport CreateChannel from './CreateChannel';\nimport ChannelOptions from './ChannelOptions';\nimport TeamMessage from './TeamMessage';\nimport ChannelInner from './ChannelInner';\n\n// style for main chat page container for all states\nvar channelStyle = {\n    height: \"100%\",\n    width: \"100%\",\n  };\n\n//CHat page component function, has various state change props\nfunction ChatPage(\n    { newChannel, openOptions, setNewChannel, setOpenOptions, createType }\n    ) {\n        //get channel from context\n    const { channel } = useChatContext();\n//if new channel, return the createChannel component\n    if(newChannel){\n        return(\n            <div style={channelStyle}>\n                <CreateChannel createType={createType} \n                setNewChannel={setNewChannel} />\n            </div>\n        )\n    }\n//if the option state is true, open the options component, pass it the function so we can close menu later\n    if(openOptions){\n        return(\n            <div style={channelStyle}>\n                <ChannelOptions \n                setOpenOptions={setOpenOptions}/>\n            </div>\n        )\n    }\n        // Set up chat page, messages for message list provided by message props passed into our own  team message\n        // component. Then render the actual chat page (channel inner) pass the options state function so we can put \n        // an option button in the header for groups (not there in default component, why we need to make it)\n    return (\n        <div style={channelStyle}>\n            <Channel Message={(messageProps) => \n                <TeamMessage  {...messageProps} />} >\n            <ChannelInner setOpenOptions={setOpenOptions} />\n            </Channel >\n        </div>\n    )\n}\n\nexport default ChatPage\n",["155","156"],"/home/dan/Documents/Untitled Folder/361Project1-master/client/src/components/Groups.jsx",["157","158","159","160"],"import React from 'react'\nimport {AddChannel} from '../Stuff/AddChannel'\n\n\n// We get the props from the api here, as well as type and state functions\nfunction Groups ({children, error = false, loading, type, setNewChannel, setCreateType, newChannel, openOptions, setOpenOptions}) {\n    // If we get an error from the API channelList, we display the following\n    if(error == true) {\n        if (type === 'team'){\n            return (\n            <div>\n                    Connection Error! Try again later\n            </div>)\n        }\n        else{\n            return \n        }\n    }\n    // If we our currently loading our group list, we tell the user\n    if(loading == true){\n        return (\n            <div>\n                    loading, please wait...\n            </div>\n        )\n    }\n    // We return the correct title and add button for the channel list we are generating with this component\n    // We add the tooltip code as well. We pass the correct props to the new channel button we embed into the header\n    // finally, we render the preview components that go with this list.\n    return (\n        <div>\n            <div>\n                <p>\n                    {type == 'team' ? 'Channels' : 'Direct Messages'}\n                </p>\n                Add New:\n                <div  className={`addButtonHolder_${type === 'team' ? 'Channels' : 'DirectMessages'}`}> \n                <span className={`addToolTip_${type === 'team' ? 'Channels' : 'DirectMessages'}`}> Click here to create a group with members </span>\n               \n                {/* Svg to add channel, takes options functions and manipulates them based on attributes (onlclick) works for both\n                dms and channels. This is accomplished by setting type based upon type passed to groups component */}\n                <AddChannel\n                    type ={\n                            type == \"team\" ? \"team\" : \"messaging\"\n                        }\n                    setNewChannel={setNewChannel}\n                    newChannel={newChannel}\n                    setOpenOptions={setOpenOptions}\n                    openOptions={openOptions}\n                    setCreateType={setCreateType} \n                />\n                </div>\n            </div>\n            {/* Renders the actual channels in our groups component, the components are passed for us by stream-chat in GroupList*/}\n            {children}\n            </div>\n    )\n}\n\nexport default Groups\n","/home/dan/Documents/Untitled Folder/361Project1-master/client/src/components/GroupList.jsx",["161","162","163"],"import React from 'react'\nimport Cookies from 'universal-cookie';\nimport { useChatContext } from 'stream-chat-react'\nimport { ChannelList } from 'stream-chat-react'\n\nimport icon1 from '../Stuff/icon1.png'\nimport icon2 from '../Stuff/icon2.png'\nimport icon3 from '../Stuff/icon3.png'\nimport Groups from './Groups';\nconst cookies = new Cookies();\n\n// component container style\n\n//Style for the header at the top of groupList\nvar ListHeaderStyle = {\n    color: 'red',\n    padding: \"0 20px\",\n    display: \"flex\",\n    justifyContent: \"space-between\",\n    alignItems: \"center\"\n\n  };\n\n// Function returns the header of the groups side bar \nfunction ListHeader(){ \n    return (\n    <div style={ListHeaderStyle}>\n        <h2>Groups:</h2>\n    </div>\n    )\n}\n// function holds the image icons in the sidebars buttonbar. Buttons are chat icon, options Cog, and logout symbol\nfunction IconsHolder({logout, opts}) {\n    return (\n    <div className=\"icon_side_container\">\n        <div className=\"icon1\">\n            <img className ='iconimg1' \n            src={icon1} \n            width=\"32\"/>\n        </div>\n        <div className=\"icon2\" onClick={opts}>\n            <span className=\"optionsTooltip\"> Click here to open options for currently open channel</span>\n            <img className='options' \n            src={icon3}  \n            width=\"32\"/>\n        </div>\n        <div className=\"icon3\" onClick={logout}>\n            <span className=\"optionsTooltip2\"> Click here to logout and return to the sign in screen</span>\n            <img className='iconimg2' \n            src={icon2} \n            width=\"32\"/>\n        </div>\n    </div>\n    )\n}\n//custom filters for the stream chat ChannelList object, returns channels where type is eam\nfunction channelFilter(channels){\n    return channels.filter((channel) => channel.type === 'team' ) // Return channels where the type is team\n}\n//custom filters for the stream chat ChannelList object, returns channels where type is messaging\nfunction messageFilter(channels){\n    return channels.filter((channel) => channel.type === 'messaging' ) // Return channels where the type is team\n}\n\n// We have our icon bar that we render, we then place the group container header and holder. We use the stream API\n// ChannelList component to display channels, but we create our own group list component of which we pass to the \n// api's channel component as a function of the listProp prop\n// Preview and Group list are optional, if not provided, stream chat provides its own channel list (we use a custom group list(groups))\n// because the built in stream chat component looks very bad and doesnt have add buttons in it.\n// First preview shows groups, the second shows direct messaging\nfunction GroupList({setNewChannel, setCreateType, newChannel, setOpenOptions, openOptions }){\n    const { client} = useChatContext();\n// toggle options state on off with the cog symbol\n    function opts() {\n        setOpenOptions(!openOptions)\n    }\n//to logout, we simply clear the cookies. The login page in app.jsx will now trigger, reinitiating sign in\n    function logout(){\n        cookies.remove('username');\n        cookies.remove('fullname');\n        cookies.remove('token');\n        cookies.remove('userId');\n        cookies.remove('hashedPassword');\n\n        //reload Dr.Freeman\n        window.location.reload();\n    }\n// Filter out channels that don't have the user as a member (get users channels)\n    const filters = { \n        members:{$in: [client.userID]} //Get all channels where our current user is in it\n    } \n\n// return the components and there props to form our main grouplist sidebar component\n// Use stream chats channel list to render channels based upon user membership and team/DM, custom props for filters and display\n// format Use our own Groups(header) list component for buttons, use stream chats preview components (works great)\n// Pass render icon buttons, and functions required to change the chatpage state\n    return (\n        <>\n        {/* Render iconholder with the pertinenet state functions */}\n           <IconsHolder logout={logout} opts={opts} />\n            <div className =\"group-list-wrapper\"> \n               <ListHeader />\n                {/* API info at https://getstream.io/chat/docs/sdk/reactnative/core-components/channel-list/\n                Channel list Component from streamchat, we tell it what channels we want, \n                first filter gets us channels with the user in it, render filter gets us the team/message channels\n                of such channels. Setting the list prop to something overides default stream-Chat list from appearing \n                List prop takes a function that takes the default list props from stream chat component and passes it to our custom\n                groups component. The children are the list items generated for us by stream chat, we also pass other state functions\n                so we can manipulate various option states.\n                */}\n               <ChannelList\n                    filters={filters}\n                    GroupList   channelRenderFilterFn={channelFilter}\n                    \n                    List={(listProps) => (\n                        <Groups \n                            {...listProps}\n                            type=\"team\"\n                            setNewChannel={setNewChannel}\n                            setCreateType={setCreateType} \n                            newChannel={newChannel}\n                            setOpenOptions={setOpenOptions}\n                            openOptions={openOptions}\n                        />\n                    )}\n               />\n                {/* Same as above, but the filter is for DMS instead of groups */}\n               <ChannelList\n                    filters={filters}\n                    channelRenderFilterFn={messageFilter}\n                    List={(listProps) => (\n                        <Groups \n                            {...listProps}\n                            type=\"messaging\"\n                            setNewChannel={setNewChannel}\n                            setCreateType={setCreateType} \n                            newChannel={newChannel}\n                            setOpenOptions={setOpenOptions}\n                            openOptions={openOptions}\n                        />\n                    )}\n               />\n            </div>\n        </>\n    )\n}\nexport default GroupList\n","/home/dan/Documents/Untitled Folder/361Project1-master/client/src/components/SignIn.jsx",[],"/home/dan/Documents/Untitled Folder/361Project1-master/client/src/Stuff/AddChannel.js",[],"/home/dan/Documents/Untitled Folder/361Project1-master/client/src/components/CreateChannel.jsx",[],"/home/dan/Documents/Untitled Folder/361Project1-master/client/src/components/ChannelInner.jsx",["164"],"import React from 'react';\n// components from stream chat we require for the inner chat pages construction\nimport { MessageList, MessageInput, useChannelActionContext, useChannelStateContext, Window} from 'stream-chat-react';\n// This component is made up of a bunch of stream chat components\nimport {ChannelInfo} from '../Stuff/ChannelInfo'\n\n //quick style to flex stuff\n var quick_flex ={\n  display: 'flex'\n }\n\n// Style for the group channel title and header\nvar channel_header=\n{\n  fontWeight: \"bold\",\n  fontSize: \"18px\",\n  marginRight: \"8px\"\n}\n\n// Style for the \"users in group section\"\nvar right_text = {\n  fontFamily:\"sans-serif\",\n  fontSize: \"14px\",\n}\n\n// Style for above inside\nvar right_text_inner= {\n  display: \"flex\",\n  paddingLeft: \"12px\"\n}\n// container height for header\nvar header_container=\n{\n  height: \"72px\"\n}\n//main component container\nvar inner_container={\n  display: 'flex', \n  width: '100%' \n}\n\nvar head_wraps={\n  display: \"flex\",\n  alignItems: \"center\"\n}\n\n// Need open options prop for options button at top of page\nfunction ChannelInner({ setOpenOptions }){\n\n  // Function defrencrenced from the useChannelActionContext, which is context provider for the selected channel\n  // this function lets us post messages to this active channel.\n  const { postMessage } = useChannelActionContext();\n\n  // required handler for the free stream chat messaging component, fields must match streamChat APIs stuff.\n  function SubmitHandler (message)  {\n    var updatedMessage = {\n      mentioned_users: message.mentioned_users,\n      text: message.text,\n      parent: message.parent,\n      parent_id: message.parent?.id,\n      attachments: message.attachments,\n    };\n\n    // Post message (function from channelAction context) posts the message object to the current channel if there is one to send\n    if (postMessage == true) {\n      postMessage(updatedMessage);\n    }\n  };\n// https://getstream.io/chat/docs/sdk/react/utility-components/window/\n// https://getstream.io/chat/docs/sdk/react/message-input-components/message_input/#basic-usage-17\n// https://getstream.io/chat/docs/sdk/react/core-components/message_list\n// Get the components that make up our main chat page. We have a header, a message list, and an input for messages. all from the api\n// The header is the only component we make, it contains the selected channels group name and the options button for it\n// Confusingish- The message list is rendered Here (stream Chat component), but we tell streamchat how to actually render messages\n// in chatPage, where we pass our custom message component to the CHannel (stream chat component) as a prop\n// THe message input streamchat component takes the handler so that it can proccess the data our users type up.\n  return (\n      <div style={inner_container}>\n        <Window>\n          <TeamChannelHeader setOpenOptions={setOpenOptions} />\n          <MessageList />\n          <MessageInput SubmitHandler={SubmitHandler} />\n        </Window>\n      </div>\n  );\n};\n// Channel Header component, derefrence components from chat and channel contexts for proper titles and info\nfunction TeamChannelHeader ({ setOpenOptions }) {\n    var { channel, watcher_count } = useChannelStateContext(); // we can just grab the amount of people in the channel, the channel itself\n    //using the context. These are prexexisting from the stream chat api.\n    // Determines header of channel message feed\n    function MessagingHeader() {\n      // get channel members where they arent the user\n      // if were in the DMs just say DMs\n      if(channel.type === 'messaging') {\n        return (\n          <div style = {channel_header}>\n              Direct Messaging\n          </div>\n        );\n      }\n      // else we will return the channel name header for the channel\n      // We add the options icon to set channel options manually\n      return (\n        <div style={head_wraps}>\n          <p style={channel_header}>Group: {channel.data.name} </p>\n          {/* Set up our channel Options button, and the corresponding tooltip */}\n          <span style={quick_flex} onClick={() => setOpenOptions(true)}>\n            <div className =\"channelInfoHolder\">\n            <span className =\"channelInfoToolTip\">Click here to open the currently open channel's options</span>\n            <ChannelInfo />\n            </div>\n          </span>\n        </div>\n      );};\n\n    // function to get the users watching the chat, posts this number to header\n    function getWatcherText (count) {\n      if (!count) return 'Nobody is online';\n      else{\n      return `${count} users are online in this group`;\n    }\n    };\n    // Return the  Header component w container, print the watcher count from stream chat api\n    return (\n      <div style={header_container}>\n        <MessagingHeader />\n        <div style={right_text_inner}>\n          <p style={right_text}>{getWatcherText(watcher_count)}</p>\n        </div>\n      </div>\n    );\n  };\n\n  export default ChannelInner;","/home/dan/Documents/Untitled Folder/361Project1-master/client/src/components/TeamMessage.jsx",["165","166","167","168","169","170","171","172"],"/home/dan/Documents/Untitled Folder/361Project1-master/client/src/components/ChannelOptions.jsx",["173","174"],"import React, { useState } from 'react';\nimport {useChatContext} from 'stream-chat-react'\nimport UserList from './UserList';\n//opensource svg, pass it a function to change edit state to false\nimport {CloseCreate} from '../Stuff/CloseCreate'\n\n//styling for input with our channel name\nvar titleWrapperContainer= {\n    display: \"flex\",\n    flexDirection: \"column\",\n    height: \"160px\",\n    paddingLeft: \"25px\"\n}\n//styling for main options page container\nvar optionsContainer={\n    display: \"flex\",\n    flexDirection: \"column\",\n    height: \"100%\"\n}\n//styling for the options page Header\nvar optionsHeader={\n    display: \"flex\",\n    alignItems: \"center\",\n    justifyContent: \"space-between\",\n    height: \"62px\",\n    paddingRight: \"24px\"\n}\n//Styling for the outer submit button container\nvar optionsSubmitWrap={\nheight: \"80px\",\ndisplay: \"flex\",\nalignItems: \"center\",\njustifyContent: \"flex-end\",\nborderBottomRightRadius: \"16px\"\n}\n//styling for the leave channel button\nvar optionsSubmitWrap2={\n    height: \"80px\",\n    display: \"flex\",\n    alignItems: \"center\",\n    borderBottomRightRadius: \"16px\"\n    }\n// options for both of the buttons inside text for our icons sidebar\nvar optionsSubmit={\n    background: \"salmon\",\n    fontWeight: \"bold\",\n    fontSize: \"20px\",\n    padding: \"12px 22px\",\n    color: \"white\",\n    marginRight: \"30px\",\n    borderRadius: \"8px\",\n    cursor: \"pointer\"\n    }\n//function for the name input field\nfunction ChannelNameInput({channelName = '', setChannelName}){\n// If we detect title input field changes, we change our target title state for submitting eventually\n    function detectChange(e){\n        e.preventDefault()\n        setChannelName(e.target.value)\n    }\n// If we detect change in the channel name input, we set the channel name state to the detected input\n    return(\n        <div style={titleWrapperContainer}>\n            <p>Channel Name</p>\n            <input value={channelName} onChange={detectChange} placeholder=\"Channel-Name (No blanks allowed)\" />\n            <p></p>\n            <span>Add New Members</span>\n        </div>\n    )\n}\n\n// Main channel OPtions component  states to record selected users, and current names. contexts for operations gathered\nfunction ChannelOptions({setOpenOptions}){\n    // Need client for current users userID to leave groups\n    const {client} = useChatContext()\n    // Need to know what channel we are editing\n    const {channel} = useChatContext();\n    // Detect changing channel name to pass around\n    const [channelName, setChannelName] = useState(channel.data.name)\n    // array of the users that were checked in the userlist options list\n    const [checkedUsers, setCheckedUsers] = useState([])\n    // Function to handle submission\n    async function updateGroup(e){\n        e.preventDefault();\n        // if we changed the name, we need to detect and pass that\n        var detectNewName = false\n        // if we have a different name...\n        if (channelName != (channel.data.name || channel.data.id)){\n            detectNewName=true\n        }\n        //set new name by sending to stream chat component with correct context\n        if(detectNewName==true) {\n            await channel.update({name: channelName}, {text: 'name changed'})\n        }\n        //if new users, set new users from checked users array\n        if(checkedUsers.length){\n            await channel.addMembers(checkedUsers)\n        }\n        //clean up options fields\n        setChannelName(null)\n        setOpenOptions(false)\n        setCheckedUsers([])\n    }\n    // function to leave the group\n    // Take client user id, and remove from the currently selected channel, open in the options\n    async function leaveGroup(e){\n        e.preventDefault();\n        await channel.removeMembers([client.userID]);\n        // clean up the states\n        setChannelName(null)\n        setOpenOptions(false)\n        setCheckedUsers([])\n\n    }\n    // Return the full options component, we have a header, an exit button which changes state onclick\n    // We have an input component so users can change channel name\n    // We have the list of registered users rendered on the screen\n    // and we have the buttons to leave and update the group\n    return (\n        <div style={optionsContainer}>\n            <div style={optionsHeader}>\n                <p>\n                    Channel Options\n                </p>\n                <CloseCreate setOpenOptions={setOpenOptions}/>\n            </div>\n            <ChannelNameInput channelName={channelName} setChannelName={setChannelName} />\n            <UserList setCheckedUsers={setCheckedUsers} />\n            <div style={optionsSubmitWrap} onClick={updateGroup}>\n                <p style={optionsSubmit}>\n                    Update\n                </p>\n            </div>\n            <div>\n                <h2>Leave {channelName}:  </h2>\n                <p>Warning: Re-invitation required to Rejoin!</p>\n                <div style={optionsSubmitWrap2} onClick={leaveGroup}>\n                <p style={optionsSubmit}>\n                    Leave Group\n                </p>\n            </div>\n            </div>\n\n        </div>\n    )\n}\n\nexport default ChannelOptions\n","/home/dan/Documents/Untitled Folder/361Project1-master/client/src/Stuff/CloseCreate.js",[],"/home/dan/Documents/Untitled Folder/361Project1-master/client/src/Stuff/ChannelInfo.js",[],"/home/dan/Documents/Untitled Folder/361Project1-master/client/src/components/UserList.jsx",["175","176","177"],"import React, {useEffect, useState} from 'react'\nimport {useChatChannel, useChatContext} from 'stream-chat-react'\n\n// Column flex box\nvar channelStyle = {\n    display: \"flex\",\n    flexDirection: \"column\",\n    height: \"100%\"\n  };\n// style for the heade, justify content space between sets paragraphs oppostie\n  var headerStyle={\n    display: \"flex\",\n    alignItems: \"center\",\n    margin: \"0px 22px\",\n    justifyContent: \"space-between\"\n  };\n\n// Justify space here makes sure the name shows up on the left, and the invite icon shows up on the right\n// We soace styff apart with margin\n  var ListItemUserWrapper={\n    display: \"flex\",\n    alignItems: \"center\",\n    margin: \"0px 22px\",\n    justifyContent: \"space-between\"\n  };\n  // style for user list wrapper\n  var ListItemUserWrapperName={\n    display: \"flex\",\n    alignItems: \"center\",\n    textAlign: \"left\"\n  };\n\n  // style for the  user list invite box\n  var emptyCheck = {\n    height: \"32px\",\n    width: \"32px\",\n    border: \"2px solid black\",\n    borderRadius: \"15px\",\n    boxSizing: \"border-box\",\n    marginLeft: \"6px\",\n    cursor:'pointer'\n  }\n  // style for when the circle is checked for users, fill it green basically, swap your class names to do this, why we use\n  // app css sometimes\n  var Checked = {\n    height: \"32px\",\n    width: \"32px\",\n    background: \"green\",\n    border: \"2px solid black\",\n    borderRadius: \"16px\",\n    boxSizing: \"border-box\",\n    marginLeft: \"6px\",\n    cursor:'pointer'\n  }\n\n// Wrapper Component for the list, renders wrapped children to render list items in this component\n// basically we build the header, then render the children components under it\nfunction MasterList({children} ){\n    \n    return(\n        <div style={channelStyle}>\n            <p></p>\n            <div style={headerStyle}>\n                <span>Members</span>\n                <span>Group Invitation</span>\n            </div>\n             {/* Our wrapped ListItemUser components*/}\n            {children}\n        </div>\n    )\n}\n\n// Component to generate items appearing in the user list, we map users to it to build the list\nfunction ListItemUser({ user, setCheckedUsers}){\n    const [checked, setChecked] = useState(false)\n    function detectCheck(){\n        //If we detect a check for this item, we filter out this user from the list of checked users in the createChannel components state\n        if(checked == true){\n            // Kind of weird, we pass our checked users a callback function, essentially, we just make sure to remove the checked user instead of all of them\n            setCheckedUsers((prevUsers) => prevUsers.filter((prevUser) => prevUser !== user.id))\n        }\n\n        //else, we keep the previous list and add this user id to it (because if checked is false, were turning it on)\n        else{\n            setCheckedUsers((prevUsers) => [...prevUsers, user.id])\n        }\n\n        //When clicking, we set checked to the opposite of what is currently checked\n        setChecked(!checked)\n    }\n    // Return name or ID, render either the empty check or the filled in green box telling us the selection is active\n    return(\n        <div style={ListItemUserWrapper} onClick={detectCheck}>\n            <div style={ListItemUserWrapperName}>\n                <p>\n                    {user.name || user.id || \"User Information Error\"}\n                </p>\n            </div>\n            {checked ? <div style={Checked}></div> : <div style={emptyCheck}></div>}\n        </div>\n    )\n}\n\n// userlist component, \nfunction UserList({setCheckedUsers}){ \n    // get client instance\n    const {client} = useChatContext()\n    // state for user list held by the client for the list we are generating\n    const [users, setUsers] = useState([]);\n    // State for loading user list\n    const [loadingList, setloadingList] = useState(false);\n\n    // needed for async requests in this instance, render the user list once after users returned\n    useEffect(()=> {\n        async function getUserList(){\n            if(loadingList) return //If we are already getting the list, don't keep trying to get it\n            //loading set to true for the try catch block, where we query users from stream chat \n            setloadingList(true) \n            \n            //Async call to the stream chat client, filter out our own user, set range of users\n            try {\n                // Query users from client, info at https://getstream.io/chat/docs/react/query_users/\n                // Basically, we don't want client id, and we limit to 10 users\n                const response = await client.queryUsers(\n                    {id: { $ne :client.userID }}, // query users from stream chats current context, exclude the logged in user\n                    {limit: 10}\n                );\n                    //If response has entries, set users array to the response \n                if(response.users.length) {\n                    setUsers(response.users)\n                } \n            } catch (error) {\n                console.log(\"error!\")\n\n            }\n            setloadingList(false) // We have finished retreiving the user list into the use states, so we can \n            // remove the loading message\n        }\n        getUserList()\n    //empty array ensures use effect only runs after the first render is detected. Use effects usually run again when list here changes\n    },[])\n\n    //return the master list component wrapping a list item generated for ever user present in the users state array\n    return (\n    <MasterList>\n        {/* We will map every user in the users state into the ListItemUser components so that we can build a list of users*/}\n        {loadingList ? \n        <p>\n            Loading Invitation Page\n        </p> : \n            (users.map((user)=>(\n                <ListItemUser user={user} setCheckedUsers={setCheckedUsers}/>\n            ))\n            )}\n    </MasterList>\n\n    )\n}\n\nexport default UserList\n",{"ruleId":"178","replacedBy":"179"},{"ruleId":"180","replacedBy":"181"},{"ruleId":"182","severity":1,"message":"183","line":13,"column":8,"nodeType":"184","messageId":"185","endLine":13,"endColumn":14},{"ruleId":"182","severity":1,"message":"186","line":1,"column":27,"nodeType":"184","messageId":"185","endLine":1,"endColumn":36},{"ruleId":"182","severity":1,"message":"187","line":132,"column":11,"nodeType":"184","messageId":"185","endLine":132,"endColumn":26},{"ruleId":"182","severity":1,"message":"188","line":132,"column":28,"nodeType":"184","messageId":"185","endLine":132,"endColumn":46},{"ruleId":"182","severity":1,"message":"189","line":39,"column":13,"nodeType":"184","messageId":"185","endLine":39,"endColumn":20},{"ruleId":"182","severity":1,"message":"190","line":57,"column":7,"nodeType":"184","messageId":"185","endLine":57,"endColumn":20},{"ruleId":"182","severity":1,"message":"191","line":2,"column":10,"nodeType":"184","messageId":"185","endLine":2,"endColumn":21},{"ruleId":"182","severity":1,"message":"192","line":9,"column":13,"nodeType":"184","messageId":"185","endLine":9,"endColumn":29},{"ruleId":"193","severity":1,"message":"194","line":20,"column":17,"nodeType":"195","messageId":"196","endLine":20,"endColumn":19},{"ruleId":"193","severity":1,"message":"194","line":20,"column":36,"nodeType":"195","messageId":"196","endLine":20,"endColumn":38},{"ruleId":"193","severity":1,"message":"194","line":20,"column":56,"nodeType":"195","messageId":"196","endLine":20,"endColumn":58},{"ruleId":"193","severity":1,"message":"194","line":20,"column":79,"nodeType":"195","messageId":"196","endLine":20,"endColumn":81},{"ruleId":"197","severity":1,"message":"198","line":58,"column":52,"nodeType":"199","endLine":58,"endColumn":98},{"ruleId":"193","severity":1,"message":"200","line":87,"column":25,"nodeType":"195","messageId":"196","endLine":87,"endColumn":27},{"ruleId":"193","severity":1,"message":"194","line":91,"column":25,"nodeType":"195","messageId":"196","endLine":91,"endColumn":27},{"ruleId":"193","severity":1,"message":"194","line":57,"column":21,"nodeType":"195","messageId":"196","endLine":57,"endColumn":23},{"ruleId":"182","severity":1,"message":"201","line":84,"column":11,"nodeType":"184","messageId":"185","endLine":84,"endColumn":18},{"ruleId":"182","severity":1,"message":"202","line":2,"column":9,"nodeType":"184","messageId":"185","endLine":2,"endColumn":23},{"ruleId":"193","severity":1,"message":"194","line":65,"column":20,"nodeType":"195","messageId":"196","endLine":65,"endColumn":22},{"ruleId":"203","severity":1,"message":"204","line":131,"column":7,"nodeType":"205","endLine":131,"endColumn":9,"suggestions":"206"},{"ruleId":"182","severity":1,"message":"183","line":13,"column":8,"nodeType":"184","messageId":"185","endLine":13,"endColumn":14},{"ruleId":"182","severity":1,"message":"189","line":20,"column":13,"nodeType":"184","messageId":"185","endLine":20,"endColumn":20},{"ruleId":"178","replacedBy":"207"},{"ruleId":"180","replacedBy":"208"},{"ruleId":"193","severity":1,"message":"194","line":8,"column":14,"nodeType":"195","messageId":"196","endLine":8,"endColumn":16},{"ruleId":"193","severity":1,"message":"194","line":20,"column":16,"nodeType":"195","messageId":"196","endLine":20,"endColumn":18},{"ruleId":"193","severity":1,"message":"194","line":34,"column":27,"nodeType":"195","messageId":"196","endLine":34,"endColumn":29},{"ruleId":"193","severity":1,"message":"194","line":44,"column":34,"nodeType":"195","messageId":"196","endLine":44,"endColumn":36},{"ruleId":"197","severity":1,"message":"198","line":37,"column":13,"nodeType":"199","endLine":39,"endColumn":25},{"ruleId":"197","severity":1,"message":"198","line":43,"column":13,"nodeType":"199","endLine":45,"endColumn":25},{"ruleId":"197","severity":1,"message":"198","line":49,"column":13,"nodeType":"199","endLine":51,"endColumn":25},{"ruleId":"193","severity":1,"message":"194","line":65,"column":21,"nodeType":"195","messageId":"196","endLine":65,"endColumn":23},{"ruleId":"182","severity":1,"message":"192","line":9,"column":13,"nodeType":"184","messageId":"185","endLine":9,"endColumn":29},{"ruleId":"193","severity":1,"message":"194","line":22,"column":17,"nodeType":"195","messageId":"196","endLine":22,"endColumn":19},{"ruleId":"193","severity":1,"message":"194","line":22,"column":36,"nodeType":"195","messageId":"196","endLine":22,"endColumn":38},{"ruleId":"193","severity":1,"message":"194","line":22,"column":56,"nodeType":"195","messageId":"196","endLine":22,"endColumn":58},{"ruleId":"193","severity":1,"message":"194","line":22,"column":79,"nodeType":"195","messageId":"196","endLine":22,"endColumn":81},{"ruleId":"193","severity":1,"message":"194","line":54,"column":59,"nodeType":"195","messageId":"196","endLine":54,"endColumn":61},{"ruleId":"193","severity":1,"message":"194","line":55,"column":51,"nodeType":"195","messageId":"196","endLine":55,"endColumn":53},{"ruleId":"197","severity":1,"message":"198","line":60,"column":52,"nodeType":"199","endLine":60,"endColumn":98},{"ruleId":"193","severity":1,"message":"200","line":88,"column":25,"nodeType":"195","messageId":"196","endLine":88,"endColumn":27},{"ruleId":"193","severity":1,"message":"194","line":92,"column":25,"nodeType":"195","messageId":"196","endLine":92,"endColumn":27},{"ruleId":"182","severity":1,"message":"202","line":2,"column":9,"nodeType":"184","messageId":"185","endLine":2,"endColumn":23},{"ruleId":"193","severity":1,"message":"194","line":78,"column":20,"nodeType":"195","messageId":"196","endLine":78,"endColumn":22},{"ruleId":"203","severity":1,"message":"209","line":141,"column":7,"nodeType":"205","endLine":141,"endColumn":9,"suggestions":"210"},"no-native-reassign",["211"],"no-negated-in-lhs",["212"],"no-unused-vars","'Groups' is defined but never used.","Identifier","unusedVar","'useEffect' is defined but never used.","'toggleContainer' is assigned a value but never used.","'setToggleContainer' is assigned a value but never used.","'channel' is assigned a value but never used.","'initialFields' is assigned a value but never used.","'MessageTeam' is defined but never used.","'handleOpenThread' is assigned a value but never used.","eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","unexpected","jsx-a11y/alt-text","img elements must have an alt prop, either with meaningful text, or an empty string for decorative images.","JSXOpeningElement","Expected '!==' and instead saw '!='.","'members' is assigned a value but never used.","'useChatChannel' is defined but never used.","react-hooks/exhaustive-deps","React Hook useEffect has missing dependencies: 'client' and 'loading'. Either include them or remove the dependency array.","ArrayExpression",["213"],["211"],["212"],"React Hook useEffect has missing dependencies: 'client' and 'loadingList'. Either include them or remove the dependency array.",["214"],"no-global-assign","no-unsafe-negation",{"desc":"215","fix":"216"},{"desc":"217","fix":"218"},"Update the dependencies array to be: [client, loading]",{"range":"219","text":"220"},"Update the dependencies array to be: [client, loadingList]",{"range":"221","text":"222"},[4422,4424],"[client, loading]",[5338,5340],"[client, loadingList]"]