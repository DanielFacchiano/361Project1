[{"/home/dan/Documents/projectv2/client/src/index.js":"1","/home/dan/Documents/projectv2/client/src/App.jsx":"2","/home/dan/Documents/projectv2/client/src/components/GroupList.jsx":"3","/home/dan/Documents/projectv2/client/src/components/ChatPage.jsx":"4","/home/dan/Documents/projectv2/client/src/components/SignIn.jsx":"5","/home/dan/Documents/projectv2/client/src/components/Groups.jsx":"6","/home/dan/Documents/projectv2/client/src/Stuff/SearchIcon.js":"7","/home/dan/Documents/projectv2/client/src/Stuff/AddChannel.js":"8","/home/dan/Documents/projectv2/client/src/components/CreateChannel.jsx":"9","/home/dan/Documents/projectv2/client/src/components/TeamMessage.jsx":"10","/home/dan/Documents/projectv2/client/src/components/ChannelOptions.jsx":"11","/home/dan/Documents/projectv2/client/src/components/ChannelInner.jsx":"12","/home/dan/Documents/projectv2/client/src/Stuff/CloseCreate.js":"13","/home/dan/Documents/projectv2/client/src/Stuff/ChannelInfo.js":"14","/home/dan/Documents/projectv2/client/src/components/UserList.jsx":"15","/home/dan/Documents/projectv2/client/src/Stuff/InviteIcon.js":"16","/home/dan/Documents/Untitled Folder/361Project1-master/client/src/index.js":"17","/home/dan/Documents/Untitled Folder/361Project1-master/client/src/App.jsx":"18","/home/dan/Documents/Untitled Folder/361Project1-master/client/src/components/ChatPage.jsx":"19","/home/dan/Documents/Untitled Folder/361Project1-master/client/src/components/Groups.jsx":"20","/home/dan/Documents/Untitled Folder/361Project1-master/client/src/components/GroupList.jsx":"21","/home/dan/Documents/Untitled Folder/361Project1-master/client/src/components/SignIn.jsx":"22","/home/dan/Documents/Untitled Folder/361Project1-master/client/src/Stuff/AddChannel.js":"23","/home/dan/Documents/Untitled Folder/361Project1-master/client/src/components/CreateChannel.jsx":"24","/home/dan/Documents/Untitled Folder/361Project1-master/client/src/components/ChannelInner.jsx":"25","/home/dan/Documents/Untitled Folder/361Project1-master/client/src/components/TeamMessage.jsx":"26","/home/dan/Documents/Untitled Folder/361Project1-master/client/src/components/ChannelOptions.jsx":"27","/home/dan/Documents/Untitled Folder/361Project1-master/client/src/Stuff/CloseCreate.js":"28","/home/dan/Documents/Untitled Folder/361Project1-master/client/src/Stuff/ChannelInfo.js":"29","/home/dan/Documents/Untitled Folder/361Project1-master/client/src/components/UserList.jsx":"30","/home/dan/Documents/Untitled Folder/361Project1-master/client/src/Stuff/InviteIcon.js":"31"},{"size":224,"mtime":1637019369446,"results":"32","hashOfConfig":"33"},{"size":3004,"mtime":1637466162865,"results":"34","hashOfConfig":"33"},{"size":5557,"mtime":1637475749024,"results":"35","hashOfConfig":"33"},{"size":2408,"mtime":1637475217220,"results":"36","hashOfConfig":"33"},{"size":6239,"mtime":1637476774592,"results":"37","hashOfConfig":"33"},{"size":1578,"mtime":1637475700063,"results":"38","hashOfConfig":"33"},{"size":468,"mtime":1637026189328,"results":"39","hashOfConfig":"33"},{"size":734,"mtime":1637186192775,"results":"40","hashOfConfig":"33"},{"size":3703,"mtime":1637476090412,"results":"41","hashOfConfig":"33"},{"size":2206,"mtime":1637482025371,"results":"42","hashOfConfig":"33"},{"size":4602,"mtime":1637471055826,"results":"43","hashOfConfig":"33"},{"size":3815,"mtime":1637470208481,"results":"44","hashOfConfig":"33"},{"size":825,"mtime":1637188446702,"results":"45","hashOfConfig":"33"},{"size":757,"mtime":1637222571965,"results":"46","hashOfConfig":"33"},{"size":5164,"mtime":1637483696635,"results":"47","hashOfConfig":"33"},{"size":1114,"mtime":1637195357787,"results":"48","hashOfConfig":"33"},{"size":224,"mtime":1637483831000,"results":"49","hashOfConfig":"50"},{"size":3004,"mtime":1637483831000,"results":"51","hashOfConfig":"50"},{"size":2408,"mtime":1637483831000,"results":"52","hashOfConfig":"50"},{"size":1578,"mtime":1637483831000,"results":"53","hashOfConfig":"50"},{"size":5557,"mtime":1637483831000,"results":"54","hashOfConfig":"50"},{"size":6239,"mtime":1637483831000,"results":"55","hashOfConfig":"50"},{"size":734,"mtime":1637483831000,"results":"56","hashOfConfig":"50"},{"size":3703,"mtime":1637483831000,"results":"57","hashOfConfig":"50"},{"size":3730,"mtime":1637618229790,"results":"58","hashOfConfig":"50"},{"size":2476,"mtime":1637619386040,"results":"59","hashOfConfig":"50"},{"size":4643,"mtime":1637618611387,"results":"60","hashOfConfig":"50"},{"size":825,"mtime":1637483831000,"results":"61","hashOfConfig":"50"},{"size":757,"mtime":1637483831000,"results":"62","hashOfConfig":"50"},{"size":5164,"mtime":1637483831000,"results":"63","hashOfConfig":"50"},{"size":1114,"mtime":1637483831000,"results":"64","hashOfConfig":"50"},{"filePath":"65","messages":"66","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"67"},"12uut2j",{"filePath":"68","messages":"69","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"70","messages":"71","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"72","messages":"73","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"74","messages":"75","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"76","messages":"77","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"78","messages":"79","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"67"},{"filePath":"80","messages":"81","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"67"},{"filePath":"82","messages":"83","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"84","messages":"85","errorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"86","messages":"87","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"88","messages":"89","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"90","messages":"91","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"67"},{"filePath":"92","messages":"93","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"67"},{"filePath":"94","messages":"95","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"96","messages":"97","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"67"},{"filePath":"98","messages":"99","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"100"},"iqfogk",{"filePath":"101","messages":"102","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"103","usedDeprecatedRules":"100"},{"filePath":"104","messages":"105","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"106","usedDeprecatedRules":"100"},{"filePath":"107","messages":"108","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"100"},{"filePath":"109","messages":"110","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"111","usedDeprecatedRules":"100"},{"filePath":"112","messages":"113","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"114","usedDeprecatedRules":"100"},{"filePath":"115","messages":"116","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"100"},{"filePath":"117","messages":"118","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"100"},{"filePath":"119","messages":"120","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"121","messages":"122","errorCount":0,"warningCount":9,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"123","messages":"124","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"125","messages":"126","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"100"},{"filePath":"127","messages":"128","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"100"},{"filePath":"129","messages":"130","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"131","usedDeprecatedRules":"100"},{"filePath":"132","messages":"133","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"100"},"/home/dan/Documents/projectv2/client/src/index.js",[],["134","135"],"/home/dan/Documents/projectv2/client/src/App.jsx",["136"],"/home/dan/Documents/projectv2/client/src/components/GroupList.jsx",["137","138","139"],"/home/dan/Documents/projectv2/client/src/components/ChatPage.jsx",["140"],"/home/dan/Documents/projectv2/client/src/components/SignIn.jsx",["141"],"/home/dan/Documents/projectv2/client/src/components/Groups.jsx",[],"/home/dan/Documents/projectv2/client/src/Stuff/SearchIcon.js",[],"/home/dan/Documents/projectv2/client/src/Stuff/AddChannel.js",[],"/home/dan/Documents/projectv2/client/src/components/CreateChannel.jsx",[],"/home/dan/Documents/projectv2/client/src/components/TeamMessage.jsx",["142","143","144","145","146","147","148"],"/home/dan/Documents/projectv2/client/src/components/ChannelOptions.jsx",["149","150"],"/home/dan/Documents/projectv2/client/src/components/ChannelInner.jsx",["151","152"],"/home/dan/Documents/projectv2/client/src/Stuff/CloseCreate.js",[],"/home/dan/Documents/projectv2/client/src/Stuff/ChannelInfo.js",[],"/home/dan/Documents/projectv2/client/src/components/UserList.jsx",["153","154","155"],"/home/dan/Documents/projectv2/client/src/Stuff/InviteIcon.js",[],"/home/dan/Documents/Untitled Folder/361Project1-master/client/src/index.js",[],["156","157"],"/home/dan/Documents/Untitled Folder/361Project1-master/client/src/App.jsx",["158"],"import './App.css';\nimport {StreamChat} from 'stream-chat'\nimport Cookies from 'universal-cookie'\nimport { Chat } from 'stream-chat-react' //The Main wrapper for all the stream api Channel shenanigans we are using\nimport { useState } from 'react';\n//THis is what styles the components of Stream Chat. If the styles look professional anywhere its this\nimport 'stream-chat-react/dist/css/index.css'\n\n\n//where we import our components into the program\nimport ChatPage from './components/ChatPage' \nimport GroupList from './components/GroupList'\nimport Groups from './components/Groups';\nimport SignIn from './components/SignIn';\n\n\n//Our API key for stream chat, we use the stream chat to get and instance of it to hoist into the chat client\nvar streamKey='7z6fubsdagca'\n//cookies instance\nconst cookies = new Cookies();\n//if were signed in, cookies should gave a authorization token\nconst userSignedIn = cookies.get(\"token\");\n\n//get our stream chat instace\nvar instance = StreamChat.getInstance(streamKey)\n//if we have an auth token, we can pass its info to the stream instance to get our users stuff\nif(userSignedIn) {\n  instance.connectUser({\n      token : cookies.get('token'),\n      name: cookies.get('username'),\n      fullName: cookies.get('fullname'),\n      id: cookies.get('userId'),\n      hashedPassword: cookies.get('hashedPassword')\n  }, userSignedIn)\n}\nconsole.log(userSignedIn)\n\n// The main componenet we put into the html document\nfunction App() {\n  // If were using a Team messanger or a direct message (for when editing/creating channels)\n  const [createType, setCreateType] = useState('')\n  // If we set this state to true, we want the chat page to show the create channel page\n  const [newChannel, setNewChannel] = useState(false)\n  //  if we set this to true, we want the channel options to open\n  const [openOptions, setOpenOptions] = useState(false)\n\n  // if no users are signed in, we want the sign in component so we can get a user\n  if(userSignedIn == null){ return <SignIn /> \n  }\n  //Return the main chat application, with the sidebar grouplist and the main chat page\n  // we pass them the functions needed to change states to open different windows and options\n  return (\n    //The most powerful wrapper \n    <div className=\"eminmen\">\n{/* chat is a component from stream api that wraps the application. Provides \"chat context to childrem including StreamChat client isntance\" */}\n      <Chat client = {instance} theme='team light'>\n            <GroupList\n              newChannel={newChannel}\n              setCreateType={setCreateType}\n              setNewChannel={setNewChannel}\n              setOpenOptions={setOpenOptions}\n              openOptions={openOptions}\n            />\n\n            <ChatPage\n              newChannel={newChannel}\n              openOptions={openOptions}\n              setNewChannel={setNewChannel}\n              setOpenOptions={setOpenOptions}\n              createType={createType}\n            />\n      </Chat>\n    </div>\n  );\n\n}\n\nexport default App;\n","/home/dan/Documents/Untitled Folder/361Project1-master/client/src/components/ChatPage.jsx",["159"],"import React from 'react'\nimport {useChatContext} from \"stream-chat-react\"\nimport {Channel} from \"stream-chat-react\"\nimport CreateChannel from './CreateChannel';\nimport ChannelOptions from './ChannelOptions';\nimport TeamMessage from './TeamMessage';\nimport ChannelInner from './ChannelInner';\n\n// style for main chat page container for all states\nvar channelStyle = {\n    height: \"100%\",\n    width: \"100%\",\n  };\n\n  // Chat history style\nvar EmptyChannelStyle = {\n    display: \"flex\",\n    height: \"100%\",\n    flexDirection: \"column\",\n  };\n// for previous history messages\n  var EmptyChannelParagraphStyle = {\n    fontFamily: \"sans-serif\",\n    fontWeight: \"bold\",\n    fontSize: \"18px\",\n    marginBottom: \"10px\"\n  };\n  //send preview style\n  var EmptyChannelParagraphTwoStyle = {\n    fontSize: \"14px\",\n    lineHeight: \"120%\",\n    margin: \"0\",\n  };\n//CHat page component function, has various state change props\nfunction ChatPage(\n    { newChannel, openOptions, setNewChannel, setOpenOptions, createType }\n    ) {\n        //get channel from context\n    const { channel } = useChatContext();\n//if new channel, return the createChannel component\n    if(newChannel){\n        return(\n            <div style={channelStyle}>\n                <CreateChannel createType={createType} setNewChannel={setNewChannel} />\n            </div>\n        )\n    }\n//if the option state is true, open the options component\n    if(openOptions){\n        return(\n            <div style={channelStyle}>\n                <ChannelOptions setOpenOptions={setOpenOptions}/>\n            </div>\n        )\n    }\n    //needed for stream api channel component to function\n    const noState=() => (\n        <div style={EmptyChannelStyle}>\n            <p style={EmptyChannelParagraphStyle}>Chat History Start: </p>\n            <p style={EmptyChannelParagraphTwoStyle}>Send stuff</p>\n        </div>\n    )\n        // Set up chat page, messages for message list provided by message props passed into Built team message\n        // component. Pass options to inner for option opening via title button\n    return (\n        <div style={channelStyle}>\n            <Channel\n                EmptyStateIndicator={noState}\n                Message={(messageProps, i) => <TeamMessage key={i} {...messageProps} />}\n            >\n                <ChannelInner setOpenOptions={setOpenOptions} />\n            </Channel >\n        </div>\n    )\n}\n\nexport default ChatPage\n","/home/dan/Documents/Untitled Folder/361Project1-master/client/src/components/Groups.jsx",[],"/home/dan/Documents/Untitled Folder/361Project1-master/client/src/components/GroupList.jsx",["160","161","162"],"import React, { useState, useEffect} from 'react'\nimport Cookies from 'universal-cookie';\nimport { useChatContext, ChannelList } from 'stream-chat-react'\nimport icon1 from '../Stuff/icon1.png'\nimport icon2 from '../Stuff/icon2.png'\nimport icon3 from '../Stuff/icon3.png'\n\nimport Groups from './Groups';\nconst cookies = new Cookies();\n\n// component container style\nvar listStyle = {\n    display: \"flex\",\n    height: \"100%\"\n}\n//Style for the header at the top of groupList\nvar ListHeaderStyle = {\n    color: 'red',\n    padding: \"0 20px\",\n    display: \"flex\",\n    justifyContent: \"space-between\",\n    alignItems: \"center\"\n\n  };\n//We can use inline styles by creating a json of styles and setting style attribute to them inline\nvar titleStyle = {\n    fontFamily: \"sans-serif\",\n    fontStyle: \"normal\",\n    fontWeight: \"bold\",\n    fontSize: \"18px\",\n    lineHeight: \"28px\",\n}\n// Function returns the header \nfunction ListHeader(){ \n    return (\n    <div style={ListHeaderStyle}>\n        <p style={titleStyle} >Groups:</p>\n\n    </div>\n    )\n}\n// function holds the image icons in the sidebars buttonbar. Buttons are chat icon, options Cog, and logout symbol\nfunction IconsHolder({logout, opts}) {\n    return (\n    <div className=\"icon_side_container\">\n        <div className=\"icon1\">\n            <img className ='iconimg1' src={icon1} alt=\"appIcon\" width=\"30\"/>\n        </div>\n        <div className=\"icon2\" onClick={opts}>\n            <img className='options' src={icon3} alt=\"OptionsIcon\" width=\"30\"/>\n        </div>\n        <div className=\"icon2\" onClick={logout}>\n            <img className='iconimg2' src={icon2} alt=\"LogoutIcon\" width=\"30\"/>\n        </div>\n    </div>\n    )\n}\n//custom filters for the stream chat ChannelList object, returns channels where type is eam\nfunction channelFilter(channels){\n    return channels.filter((channel) => channel.type === 'team' ) // Return channels where the type is team\n}\n//custom filters for the stream chat ChannelList object, returns channels where type is messaging\nfunction messageFilter(channels){\n    return channels.filter((channel) => channel.type === 'messaging' ) // Return channels where the type is team\n}\n\n//We have our icon bar that we render, we then place the group container header and holder. We use the stream API\n// ChannelList component to display channels, but we create our own group list component of which we pass to the \n// api's channel component as a function of the listProp prop\n// Preview and Group list are optional, if not provided, stream chat provides its own channel list\n// First preview shows groups, the second shows direct messaging\nfunction GroupListContent({setNewChannel, setCreateType, newChannel, setOpenOptions, openOptions }){\n    const { client} = useChatContext();\n// toggle options state on off with the cog symbol\n    function opts() {\n        setOpenOptions(!openOptions)\n    }\n//to logout, we simply clear the cookies. The login page in app.jsx will now trigger, reinitiating sign in\n    function logout(){\n        cookies.remove('token');\n        cookies.remove('username');\n        cookies.remove('fullname');\n        cookies.remove('userId');\n        cookies.remove('hashedPassword');\n        window.location.reload();\n    }\n// Filter out channels that don't have the user as a member (get users channels)\n    const filters = { members:{$in: [client.userID]}} //Get all channels where our current user is in it\n\n//return the components and there props to form our main grouplist sidebar component\n    return (\n        <>\n           <IconsHolder logout={logout} opts={opts} />\n            <div className =\"group-list-wrapper\"> \n               <ListHeader />\n               <ChannelList\n                    filters={filters}\n                    GroupList   channelRenderFilterFn={channelFilter}\n                    List={(listProps) => (\n                        <Groups \n                            {...listProps}\n                            type=\"team\"\n                            setNewChannel={setNewChannel}\n                            setCreateType={setCreateType} \n                            newChannel={newChannel}\n                            setOpenOptions={setOpenOptions}\n                        />\n                    )}\n\n               />\n               <ChannelList\n                    filters={filters}\n                    channelRenderFilterFn={messageFilter}\n                    List={(listProps) => (\n                        <Groups \n                            {...listProps}\n                            type=\"messaging\"\n                            setNewChannel={setNewChannel}\n                            setCreateType={setCreateType} \n                            newChannel={newChannel}\n                            setOpenOptions={setOpenOptions}\n                        />\n                    )}\n\n               />\n            </div>\n        </>\n    )\n}\n// Previously required for removed feature, essentially just rengers the grouplistContent component now\nfunction GroupList({setNewChannel, setCreateType, newChannel, setOpenOptions, openOptions }){\n    const[toggleContainer, setToggleContainer] = useState(false)\n    return(\n        <>\n            <div style={listStyle}>\n                <GroupListContent\n                    setNewChannel={setNewChannel} \n                    setCreateType={setCreateType} \n                    newChannel={newChannel} \n                    setOpenOptions={setOpenOptions}\n                    openOptions={openOptions}\n                />\n            </div>\n        </>\n    )\n\n}\n\nexport default GroupList\n","/home/dan/Documents/Untitled Folder/361Project1-master/client/src/components/SignIn.jsx",["163"],"import React from 'react'\nimport {useState} from 'react'\nimport axios from 'axios'\nimport Cookies from 'universal-cookie'\n\n// secondary container, contains background\nvar SignInInputs = {\n    flex: \"1\",\n    display: \"flex\",\n    flexDirection: \"column\",\n    background: \"lightblue\",  \n    padding: \"6rem\",\n    justifyContent: \"center\"\n  }\n\n  // Main container for this page\nvar SignInContainerStyle = {\n    minHeight: \"100vh\",\n    display: \"flex\",\n    flexDirection: \"row\"\n  };\n// style for the box fields are contained within\n  var SignUpText = {\n    display: \"flex\",\n    padding: \"24px\",\n    borderRadius: \"10px\",\n    background: \"white\",\n    flexDirection: \"column\"\n\n  }\n\n\n// style for the text of the switch button\n  var buttonColor = {\n      color : \"blue\",\n      cursor: \"pointer\"\n  }\n// style for the button wrapper\n  var buttonHolderStyle= {\n    marginTop: \"2rem\",\n    display: \"flex\",\n    justifyContent: \"flex-start\"\n  }\n  \n  //style for sign in/ sign up buton\n  var buttonStyle={\n    borderRadius: \"4px\",\n    background: \"#000000\",\n    border: \"1px solid #005fff\",\n    color: \"#fff\",\n    fontWeight: \"500\",\n    padding:\" 0.5rem 1.1rem\",\n    cursor: \"pointer\",\n    transition: \"0.3s ease\"\n  }\n\n  var initialFields = {\n    fullName: '',\n    username: '',\n    password: '',\n    confirmPassword:''\n}\n//get our cookies instance\nconst cookies = new Cookies();\n\nfunction SignIn() {\n// fields of the sign in/up form saved as a use state to send to the server\n    const [fields, setFields] = useState(false);\n    const [signIn, setSignIn] = useState(false);\n//If we hit the mode change button, we change modes (signin/signup)\n    function nextMode(){\n        setSignIn(!signIn)\n    }\n// If we detect that something has changed in one of the inputs, we pass all the previous fields to fields usestate, \n//and then we set the specifc fields of the input that was changed to the new detected value. \n    function detectChange(e){\n        setFields({...fields, [e.target.name]: e.target.value })\n\n    }\n    // function to submit new users/ sign in info\n    // we send front end info into our server which sends it to the stream chat api server\n    // we also set our cookies to the users data\n    async function handleSubmit(e){\n        e.preventDefault();\n\n        const {fullName, username, password} = fields\n        const URL =\"http://localhost:4000/form\";\n        const { data: {token, userId, hashedPassword} } = await axios.post(`${URL}/${signIn ? 'signin' : 'register'}`,{\n            username, password, fullName\n        })\n        cookies.set('token', token)\n        cookies.set('username', username)\n        cookies.set('fullName', fullName)\n        cookies.set('userId', userId)\n        //sign up needs the hashed pw\n        if(!signIn){\n            cookies.set('hashedPassword', hashedPassword)   \n        }\n        //after cookies have been set, we reload the window\n        window.location.reload();\n\n    }\n    // The various html to lay out the sign in/ sign up page\n    return (\n        <div style={SignInContainerStyle}>\n            <div style={SignInInputs}>\n                <p style={SignUpText}> \n                    <h2>{signIn ? 'Sign In Here:' : 'Sign Up Here:'}</h2>\n                    <form onSubmit={handleSubmit}>\n                        {!signIn && (\n                            <div className= \"input_field\">\n                                <label htmlFor=\"fullName\">Full Name </label>\n                                <input\n                                    name=\"fullName\"\n                                    onChange={detectChange}\n                                    type=\"text\"\n                                    placeholder=\"Insert Full Name\"\n                                    required\n                                />\n                            </div>\n                        )}\n\n                            <div className= \"input_field\">\n                                <label htmlFor=\"username\">UserName </label>\n                                <input\n                                    name=\"username\"\n                                    onChange={detectChange}\n                                    type=\"text\"\n                                    placeholder=\"Insert username\"\n                                    required\n                                />\n                            </div>\n                            <div className= \"input_field\">\n                                <label htmlFor=\"password\">Password </label>\n                                <input\n                                    name=\"password\"\n                                    onChange={detectChange}\n                                    type=\"password\"\n                                    placeholder=\"Insert password here\"\n                                    required\n                                />\n                            </div>\n                            {!signIn && (\n                            <div className= \"input_field\">\n                                <label htmlFor=\"confirmPassword\">Confirm Password </label>\n                                <input\n                                    name=\"confirmPassword\"\n                                    onChange={detectChange}\n                                    type=\"password\"\n                                    placeholder=\"confirm_password\"\n                                    required\n                                />\n                            </div>\n                        )}\n                        <div style = {buttonHolderStyle}>\n                            <button style = {buttonStyle}>\n                                {!signIn ? \"Sign Up!\" : \"Sign In!\"}\n                            </button>\n                            \n                        </div>\n                    </form>\n                    <div >\n                        <p>\n                            {signIn ? \"Go to Sign Up Page:\" : \"Go to Sign In Page:\"}\n                            <div style ={buttonColor}onClick={nextMode}>\n                                {signIn ? 'Sign Up' : 'Sign In'}\n                            </div>\n                        </p>\n                    </div>\n                </p>\n            </div>\n        </div>\n    )\n}\n\nexport default SignIn\n","/home/dan/Documents/Untitled Folder/361Project1-master/client/src/Stuff/AddChannel.js",[],"/home/dan/Documents/Untitled Folder/361Project1-master/client/src/components/CreateChannel.jsx",[],"/home/dan/Documents/Untitled Folder/361Project1-master/client/src/components/ChannelInner.jsx",["164","165","166"],"/home/dan/Documents/Untitled Folder/361Project1-master/client/src/components/TeamMessage.jsx",["167","168","169","170","171","172","173","174","175"],"/home/dan/Documents/Untitled Folder/361Project1-master/client/src/components/ChannelOptions.jsx",["176","177"],"/home/dan/Documents/Untitled Folder/361Project1-master/client/src/Stuff/CloseCreate.js",[],"/home/dan/Documents/Untitled Folder/361Project1-master/client/src/Stuff/ChannelInfo.js",[],"/home/dan/Documents/Untitled Folder/361Project1-master/client/src/components/UserList.jsx",["178","179","180"],"import React, {useEffect, useState} from 'react'\nimport {useChatChannel, useChatContext} from 'stream-chat-react'\nimport {InviteIcon} from '../Stuff/InviteIcon'\n\n// Column flex box\nvar channelStyle = {\n    display: \"flex\",\n    flexDirection: \"column\",\n    height: \"100%\"\n  };\n// style for the heade, justify content space between sets paragraphs oppostie\n  var headerStyle={\n    display: \"flex\",\n    alignItems: \"center\",\n    margin: \"0px 20px\",\n    justifyContent: \"space-between\"\n  };\n\n//Justify space here makes sure the name shows up on the left, and the invite icon shows up on the right\n  var ListItemUserWrapper={\n    display: \"flex\",\n    alignItems: \"center\",\n    margin: \"0px 20px\",\n    justifyContent: \"space-between\"\n  };\n  // style for user list wrapper\n  var ListItemUserWrapperName={\n    display: \"flex\",\n    alignItems: \"center\",\n    flex: \"2\",\n    textAlign: \"left\"\n  };\n\n  // style for the  user list invite box\n  var emptyCheck = {\n    height: \"28px\",\n    width: \"28px\",\n    background: \"#f7f6f8\",\n    border: \"1px solid #dedddf\",\n    borderRadius: \"14px\",\n    boxSizing: \"border-box\",\n    marginLeft: \"4px\",\n    cursor:'pointer'\n  }\n\n\n// Wrapper for the list, has access to children, to bring rendered components down to render list in this component\nfunction MasterList({ children }){\n    return(\n        <div style={channelStyle}>\n            <div style={headerStyle}>\n                <p>Members</p>\n                <p>Group Invite</p>\n            </div>\n            {children}\n        </div>\n    )\n}\n\n// Function to generate items appearing in the list\nfunction ListItemUser({ user, setCheckedUsers}){\n    const [checked, setChecked] = useState(false)\n    function detectCheck(){\n        //If we detect a check, we filter out this user from the list of checked users in the createChannel components state\n        if(checked == true){\n            setCheckedUsers((prevUsers) => prevUsers.filter((prevUser) => prevUser !== user.id))\n        }\n        //else, we keep the previous list and add this user id to it\n        else{\n            setCheckedUsers((prevUsers) => [...prevUsers, user.id])\n        }\n\n        //When clicking, we set checked to the opposite of what is currently checked\n        setChecked(!checked)\n    }\n    // Return name or ID, render either the empty check or the checked svg if the checked state is active\n    return(\n        <div style={ListItemUserWrapper} onClick={detectCheck}>\n            <div style={ListItemUserWrapperName}>\n                <p>\n                    {user.name || user.id}\n                </p>\n            </div>\n            {checked ? <InviteIcon /> : <div style={emptyCheck}></div>}\n        </div>\n    )\n}\n\n\nfunction UserList({setCheckedUsers}){ \n    // get client instance\n    const {client} = useChatContext()\n    // state for user list\n    const [users, setUsers] = useState([]);\n    // State for loading user list\n    const [loading, setLoading] = useState(false);\n    //state for no users\n    const [empty, setEmpty] = useState(false);\n    //errir detectuib state\n    const [err, setErr] = useState(false)\n\n    // needed for async requests in this instance, render the user list once after users returned\n    useEffect(()=> {\n        const getUsers = async () => {\n            if(loading) return //If we are already getting the list, don't keep trying to get it\n            //loading set to true for the try catch block, where we query users from stream chat \n            setLoading(true) \n            \n            //Async call to the stream chat client, filter out our own user, set range of users\n            try {\n                const response = await client.queryUsers(\n                    {id: {$ne :client.userID}}, // query users from stream chats current context, exclude the logged in user\n                    {id : 1},\n                    {limit: 10}\n                );\n                    //If response has entries, set users array to the response or set empty flag as true\n                if(response.users.length) {\n                    setUsers(response.users)\n                } else {\n                    setEmpty(true)\n                }\n            } catch (error) {\n                setErr(true)\n\n            }\n            setLoading(false) // We have finished retreiving the user list into the use states \n        }\n\n        if(client) getUsers()\n//empty array ensures use effect only runs after the first render is detected\n    },[])\n    if(err){\n        return (<MasterList>\n          <div> Issue loading users </div>\n        </MasterList>\n        )\n    }\n    // display is user list is empty\n    if(empty){\n        return (<MasterList>\n          <div> No members available </div>\n        </MasterList>\n        )\n    }\n    //return the master list component wrapping a list item generated for ever user present in the users state array\n    return (\n    <MasterList>\n        {loading ? \n        <p>\n            Loading Invitation Page\n        </p> : \n            (users?.map((user, i)=>(\n                <ListItemUser index={i} key={user.id} user={user} setCheckedUsers={setCheckedUsers}/>\n            ))\n            )}\n    </MasterList>\n\n    )\n}\n\nexport default UserList\n","/home/dan/Documents/Untitled Folder/361Project1-master/client/src/Stuff/InviteIcon.js",[],{"ruleId":"181","replacedBy":"182"},{"ruleId":"183","replacedBy":"184"},{"ruleId":"185","severity":1,"message":"186","line":13,"column":8,"nodeType":"187","messageId":"188","endLine":13,"endColumn":14},{"ruleId":"185","severity":1,"message":"189","line":1,"column":27,"nodeType":"187","messageId":"188","endLine":1,"endColumn":36},{"ruleId":"185","severity":1,"message":"190","line":132,"column":11,"nodeType":"187","messageId":"188","endLine":132,"endColumn":26},{"ruleId":"185","severity":1,"message":"191","line":132,"column":28,"nodeType":"187","messageId":"188","endLine":132,"endColumn":46},{"ruleId":"185","severity":1,"message":"192","line":39,"column":13,"nodeType":"187","messageId":"188","endLine":39,"endColumn":20},{"ruleId":"185","severity":1,"message":"193","line":57,"column":7,"nodeType":"187","messageId":"188","endLine":57,"endColumn":20},{"ruleId":"185","severity":1,"message":"194","line":2,"column":10,"nodeType":"187","messageId":"188","endLine":2,"endColumn":21},{"ruleId":"185","severity":1,"message":"195","line":9,"column":13,"nodeType":"187","messageId":"188","endLine":9,"endColumn":29},{"ruleId":"196","severity":1,"message":"197","line":20,"column":17,"nodeType":"198","messageId":"199","endLine":20,"endColumn":19},{"ruleId":"196","severity":1,"message":"197","line":20,"column":36,"nodeType":"198","messageId":"199","endLine":20,"endColumn":38},{"ruleId":"196","severity":1,"message":"197","line":20,"column":56,"nodeType":"198","messageId":"199","endLine":20,"endColumn":58},{"ruleId":"196","severity":1,"message":"197","line":20,"column":79,"nodeType":"198","messageId":"199","endLine":20,"endColumn":81},{"ruleId":"200","severity":1,"message":"201","line":58,"column":52,"nodeType":"202","endLine":58,"endColumn":98},{"ruleId":"196","severity":1,"message":"203","line":87,"column":25,"nodeType":"198","messageId":"199","endLine":87,"endColumn":27},{"ruleId":"196","severity":1,"message":"197","line":91,"column":25,"nodeType":"198","messageId":"199","endLine":91,"endColumn":27},{"ruleId":"196","severity":1,"message":"197","line":57,"column":21,"nodeType":"198","messageId":"199","endLine":57,"endColumn":23},{"ruleId":"185","severity":1,"message":"204","line":84,"column":11,"nodeType":"187","messageId":"188","endLine":84,"endColumn":18},{"ruleId":"185","severity":1,"message":"205","line":2,"column":9,"nodeType":"187","messageId":"188","endLine":2,"endColumn":23},{"ruleId":"196","severity":1,"message":"197","line":65,"column":20,"nodeType":"198","messageId":"199","endLine":65,"endColumn":22},{"ruleId":"206","severity":1,"message":"207","line":131,"column":7,"nodeType":"208","endLine":131,"endColumn":9,"suggestions":"209"},{"ruleId":"181","replacedBy":"210"},{"ruleId":"183","replacedBy":"211"},{"ruleId":"185","severity":1,"message":"186","line":13,"column":8,"nodeType":"187","messageId":"188","endLine":13,"endColumn":14},{"ruleId":"185","severity":1,"message":"192","line":39,"column":13,"nodeType":"187","messageId":"188","endLine":39,"endColumn":20},{"ruleId":"185","severity":1,"message":"189","line":1,"column":27,"nodeType":"187","messageId":"188","endLine":1,"endColumn":36},{"ruleId":"185","severity":1,"message":"190","line":132,"column":11,"nodeType":"187","messageId":"188","endLine":132,"endColumn":26},{"ruleId":"185","severity":1,"message":"191","line":132,"column":28,"nodeType":"187","messageId":"188","endLine":132,"endColumn":46},{"ruleId":"185","severity":1,"message":"193","line":57,"column":7,"nodeType":"187","messageId":"188","endLine":57,"endColumn":20},{"ruleId":"185","severity":1,"message":"212","line":1,"column":17,"nodeType":"187","messageId":"188","endLine":1,"endColumn":25},{"ruleId":"185","severity":1,"message":"213","line":2,"column":95,"nodeType":"187","messageId":"188","endLine":2,"endColumn":109},{"ruleId":"196","severity":1,"message":"197","line":61,"column":21,"nodeType":"198","messageId":"199","endLine":61,"endColumn":23},{"ruleId":"185","severity":1,"message":"194","line":2,"column":10,"nodeType":"187","messageId":"188","endLine":2,"endColumn":21},{"ruleId":"185","severity":1,"message":"195","line":9,"column":13,"nodeType":"187","messageId":"188","endLine":9,"endColumn":29},{"ruleId":"196","severity":1,"message":"197","line":22,"column":17,"nodeType":"198","messageId":"199","endLine":22,"endColumn":19},{"ruleId":"196","severity":1,"message":"197","line":22,"column":36,"nodeType":"198","messageId":"199","endLine":22,"endColumn":38},{"ruleId":"196","severity":1,"message":"197","line":22,"column":56,"nodeType":"198","messageId":"199","endLine":22,"endColumn":58},{"ruleId":"196","severity":1,"message":"197","line":22,"column":79,"nodeType":"198","messageId":"199","endLine":22,"endColumn":81},{"ruleId":"196","severity":1,"message":"197","line":54,"column":59,"nodeType":"198","messageId":"199","endLine":54,"endColumn":61},{"ruleId":"196","severity":1,"message":"197","line":55,"column":51,"nodeType":"198","messageId":"199","endLine":55,"endColumn":53},{"ruleId":"200","severity":1,"message":"201","line":60,"column":52,"nodeType":"202","endLine":60,"endColumn":98},{"ruleId":"196","severity":1,"message":"203","line":87,"column":25,"nodeType":"198","messageId":"199","endLine":87,"endColumn":27},{"ruleId":"196","severity":1,"message":"197","line":91,"column":25,"nodeType":"198","messageId":"199","endLine":91,"endColumn":27},{"ruleId":"185","severity":1,"message":"205","line":2,"column":9,"nodeType":"187","messageId":"188","endLine":2,"endColumn":23},{"ruleId":"196","severity":1,"message":"197","line":65,"column":20,"nodeType":"198","messageId":"199","endLine":65,"endColumn":22},{"ruleId":"206","severity":1,"message":"207","line":131,"column":7,"nodeType":"208","endLine":131,"endColumn":9,"suggestions":"214"},"no-native-reassign",["215"],"no-negated-in-lhs",["216"],"no-unused-vars","'Groups' is defined but never used.","Identifier","unusedVar","'useEffect' is defined but never used.","'toggleContainer' is assigned a value but never used.","'setToggleContainer' is assigned a value but never used.","'channel' is assigned a value but never used.","'initialFields' is assigned a value but never used.","'MessageTeam' is defined but never used.","'handleOpenThread' is assigned a value but never used.","eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","unexpected","jsx-a11y/alt-text","img elements must have an alt prop, either with meaningful text, or an empty string for decorative images.","JSXOpeningElement","Expected '!==' and instead saw '!='.","'members' is assigned a value but never used.","'useChatChannel' is defined but never used.","react-hooks/exhaustive-deps","React Hook useEffect has missing dependencies: 'client' and 'loading'. Either include them or remove the dependency array.","ArrayExpression",["217"],["215"],["216"],"'useState' is defined but never used.","'useChatContext' is defined but never used.",["218"],"no-global-assign","no-unsafe-negation",{"desc":"219","fix":"220"},{"desc":"219","fix":"221"},"Update the dependencies array to be: [client, loading]",{"range":"222","text":"223"},{"range":"224","text":"223"},[4422,4424],"[client, loading]",[4422,4424]]